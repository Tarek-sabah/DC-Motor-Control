
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003670  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  00003670  00003704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800260  00800260  00003904  2**0
                  ALLOC
  3 .stab         0000345c  00000000  00000000  00003904  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002db2  00000000  00000000  00006d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c2af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d635  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e80c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ecc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_10>
      2c:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <main>
      8a:	0c 94 36 1b 	jmp	0x366c	; 0x366c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ec       	ldi	r26, 0xC0	; 192
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ec       	ldi	r24, 0xC0	; 192
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ec       	ldi	r22, 0xC0	; 192
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 53       	subi	r30, 0x38	; 56
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_TIMER0_void_Timer_Init>:
extern const TIMER0_SETTINGS_CONFIG TIMER0_SETTINGS_PARAMETERS;



void M_TIMER0_void_Timer_Init()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG &= TCCR0_WGM_MASK;
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 7b       	andi	r24, 0xB7	; 183
     e42:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_MODE_SELECTOR_PWM_PC;
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24

	TCCR0_REG &= TCCR0_COM_MASK;
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7c       	andi	r24, 0xCF	; 207
     e5e:	8c 93       	st	X, r24
	TCCR0_REG |= OUTPUT_COMPARE_Mode_CLEAR;
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 62       	ori	r24, 0x20	; 32
     e6c:	8c 93       	st	X, r24
//	{
//		OCR0_REG = TIMER0_SETTINGS_PARAMETERS.CTC_value;
//		H_LCD_void_sendIntNum(OCR0_REG);
//	}

}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <M_TIMER0_void_Timer_start>:

void M_TIMER0_void_Timer_start()
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
//	TCNT0_REG=TIMER0_REQUIRED_REMINDER_COUNTS;
	TCCR0_REG &= TCCR0_CS_MASK;
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	88 7f       	andi	r24, 0xF8	; 248
     e88:	8c 93       	st	X, r24
	TCCR0_REG|= TIMER0_CLK_SOURCE_0_PRESCALING;
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	81 60       	ori	r24, 0x01	; 1
     e96:	8c 93       	st	X, r24

}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <M_TIMER0_void_Timer_stop>:

void M_TIMER0_void_Timer_stop()
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TCCR0_CS_MASK;
     ea6:	a3 e5       	ldi	r26, 0x53	; 83
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e3 e5       	ldi	r30, 0x53	; 83
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	8c 93       	st	X, r24
	TCNT0_REG=0;
     eb4:	e2 e5       	ldi	r30, 0x52	; 82
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	10 82       	st	Z, r1
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <M_TIMER0_void_Timer_setDelayTimeMilliSec>:
//
//}


void M_TIMER0_void_Timer_setDelayTimeMilliSec(u16 Delay_Time_ms)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	69 97       	sbiw	r28, 0x19	; 25
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	9c 8b       	std	Y+20, r25	; 0x14
     ed6:	8b 8b       	std	Y+19, r24	; 0x13
	u16 arr[]={0,1,8,64,1024};
     ed8:	ce 01       	movw	r24, r28
     eda:	09 96       	adiw	r24, 0x09	; 9
     edc:	9e 8b       	std	Y+22, r25	; 0x16
     ede:	8d 8b       	std	Y+21, r24	; 0x15
     ee0:	ea ec       	ldi	r30, 0xCA	; 202
     ee2:	f1 e0       	ldi	r31, 0x01	; 1
     ee4:	f8 8f       	std	Y+24, r31	; 0x18
     ee6:	ef 8b       	std	Y+23, r30	; 0x17
     ee8:	fa e0       	ldi	r31, 0x0A	; 10
     eea:	f9 8f       	std	Y+25, r31	; 0x19
     eec:	ef 89       	ldd	r30, Y+23	; 0x17
     eee:	f8 8d       	ldd	r31, Y+24	; 0x18
     ef0:	00 80       	ld	r0, Z
     ef2:	8f 89       	ldd	r24, Y+23	; 0x17
     ef4:	98 8d       	ldd	r25, Y+24	; 0x18
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	98 8f       	std	Y+24, r25	; 0x18
     efa:	8f 8b       	std	Y+23, r24	; 0x17
     efc:	ed 89       	ldd	r30, Y+21	; 0x15
     efe:	fe 89       	ldd	r31, Y+22	; 0x16
     f00:	00 82       	st	Z, r0
     f02:	8d 89       	ldd	r24, Y+21	; 0x15
     f04:	9e 89       	ldd	r25, Y+22	; 0x16
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	9e 8b       	std	Y+22, r25	; 0x16
     f0a:	8d 8b       	std	Y+21, r24	; 0x15
     f0c:	99 8d       	ldd	r25, Y+25	; 0x19
     f0e:	91 50       	subi	r25, 0x01	; 1
     f10:	99 8f       	std	Y+25, r25	; 0x19
     f12:	e9 8d       	ldd	r30, Y+25	; 0x19
     f14:	ee 23       	and	r30, r30
     f16:	51 f7       	brne	.-44     	; 0xeec <M_TIMER0_void_Timer_setDelayTimeMilliSec+0x2c>

	f32 Tick_Time = (f32) (arr[TIMER0_SETTINGS_PARAMETERS.CS-1])/FCPU;
     f18:	80 91 5c 02 	lds	r24, 0x025C
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	9c 01       	movw	r18, r24
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	ce 01       	movw	r24, r28
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	82 0f       	add	r24, r18
     f2e:	93 1f       	adc	r25, r19
     f30:	fc 01       	movw	r30, r24
     f32:	38 96       	adiw	r30, 0x08	; 8
     f34:	80 81       	ld	r24, Z
     f36:	91 81       	ldd	r25, Z+1	; 0x01
     f38:	cc 01       	movw	r24, r24
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	34 e2       	ldi	r19, 0x24	; 36
     f52:	44 e7       	ldi	r20, 0x74	; 116
     f54:	5b e4       	ldi	r21, 0x4B	; 75
     f56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	af 83       	std	Y+7, r26	; 0x07
     f64:	b8 87       	std	Y+8, r27	; 0x08
	u32 Desired_Ticks = (u32)(Delay_Time_ms/1000) / Tick_Time;
     f66:	8b 89       	ldd	r24, Y+19	; 0x13
     f68:	9c 89       	ldd	r25, Y+20	; 0x14
     f6a:	28 ee       	ldi	r18, 0xE8	; 232
     f6c:	33 e0       	ldi	r19, 0x03	; 3
     f6e:	b9 01       	movw	r22, r18
     f70:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__udivmodhi4>
     f74:	cb 01       	movw	r24, r22
     f76:	cc 01       	movw	r24, r24
     f78:	a0 e0       	ldi	r26, 0x00	; 0
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	bc 01       	movw	r22, r24
     f7e:	cd 01       	movw	r24, r26
     f80:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	2d 81       	ldd	r18, Y+5	; 0x05
     f8e:	3e 81       	ldd	r19, Y+6	; 0x06
     f90:	4f 81       	ldd	r20, Y+7	; 0x07
     f92:	58 85       	ldd	r21, Y+8	; 0x08
     f94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	bc 01       	movw	r22, r24
     f9e:	cd 01       	movw	r24, r26
     fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	ab 83       	std	Y+3, r26	; 0x03
     fae:	bc 83       	std	Y+4, r27	; 0x04

	if(TIMER0_SETTINGS_PARAMETERS.WGM == TIMER0_MODE_SELECTOR_NORMAL)
     fb0:	80 91 5d 02 	lds	r24, 0x025D
     fb4:	88 23       	and	r24, r24
     fb6:	01 f5       	brne	.+64     	; 0xff8 <M_TIMER0_void_Timer_setDelayTimeMilliSec+0x138>
	{
		TIMER0_REQUIRED_OVERFLOW_COUNTS = Desired_Ticks / 256;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	ab 81       	ldd	r26, Y+3	; 0x03
     fbe:	bc 81       	ldd	r27, Y+4	; 0x04
     fc0:	89 2f       	mov	r24, r25
     fc2:	9a 2f       	mov	r25, r26
     fc4:	ab 2f       	mov	r26, r27
     fc6:	bb 27       	eor	r27, r27
     fc8:	80 93 68 02 	sts	0x0268, r24
     fcc:	90 93 69 02 	sts	0x0269, r25
     fd0:	a0 93 6a 02 	sts	0x026A, r26
     fd4:	b0 93 6b 02 	sts	0x026B, r27
		TIMER0_REQUIRED_REMINDER_COUNTS = Desired_Ticks % 256;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	ab 81       	ldd	r26, Y+3	; 0x03
     fde:	bc 81       	ldd	r27, Y+4	; 0x04
     fe0:	90 70       	andi	r25, 0x00	; 0
     fe2:	a0 70       	andi	r26, 0x00	; 0
     fe4:	b0 70       	andi	r27, 0x00	; 0
     fe6:	80 93 6c 02 	sts	0x026C, r24
     fea:	90 93 6d 02 	sts	0x026D, r25
     fee:	a0 93 6e 02 	sts	0x026E, r26
     ff2:	b0 93 6f 02 	sts	0x026F, r27
     ff6:	34 c0       	rjmp	.+104    	; 0x1060 <M_TIMER0_void_Timer_setDelayTimeMilliSec+0x1a0>
	}

	else if(TIMER0_SETTINGS_PARAMETERS.WGM == TIMER0_MODE_SELECTOR_CTC)
     ff8:	80 91 5d 02 	lds	r24, 0x025D
     ffc:	88 30       	cpi	r24, 0x08	; 8
     ffe:	81 f5       	brne	.+96     	; 0x1060 <M_TIMER0_void_Timer_setDelayTimeMilliSec+0x1a0>
	{
		TIMER0_REQUIRED_OVERFLOW_COUNTS = Desired_Ticks / TIMER0_SETTINGS_PARAMETERS.CTC_value;
    1000:	80 91 5f 02 	lds	r24, 0x025F
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	ab 81       	ldd	r26, Y+3	; 0x03
    1012:	bc 81       	ldd	r27, Y+4	; 0x04
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodsi4>
    101c:	da 01       	movw	r26, r20
    101e:	c9 01       	movw	r24, r18
    1020:	80 93 68 02 	sts	0x0268, r24
    1024:	90 93 69 02 	sts	0x0269, r25
    1028:	a0 93 6a 02 	sts	0x026A, r26
    102c:	b0 93 6b 02 	sts	0x026B, r27
		TIMER0_REQUIRED_REMINDER_COUNTS = Desired_Ticks % TIMER0_SETTINGS_PARAMETERS.CTC_value;
    1030:	80 91 5f 02 	lds	r24, 0x025F
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	ab 81       	ldd	r26, Y+3	; 0x03
    1042:	bc 81       	ldd	r27, Y+4	; 0x04
    1044:	bc 01       	movw	r22, r24
    1046:	cd 01       	movw	r24, r26
    1048:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodsi4>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	80 93 6c 02 	sts	0x026C, r24
    1054:	90 93 6d 02 	sts	0x026D, r25
    1058:	a0 93 6e 02 	sts	0x026E, r26
    105c:	b0 93 6f 02 	sts	0x026F, r27
	}

}
    1060:	69 96       	adiw	r28, 0x19	; 25
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <M_TIMER0_void_EnableInt>:



void M_TIMER0_void_EnableInt()
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG &=0xFC;
    107a:	a9 e5       	ldi	r26, 0x59	; 89
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e9 e5       	ldi	r30, 0x59	; 89
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8c 7f       	andi	r24, 0xFC	; 252
    1086:	8c 93       	st	X, r24
	if(TIMER0_SETTINGS_PARAMETERS.WGM==TIMER0_MODE_SELECTOR_NORMAL)
    1088:	80 91 5d 02 	lds	r24, 0x025D
    108c:	88 23       	and	r24, r24
    108e:	41 f4       	brne	.+16     	; 0x10a0 <M_TIMER0_void_EnableInt+0x2e>
	{
		TIMSK_REG |= 0x01;
    1090:	a9 e5       	ldi	r26, 0x59	; 89
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e9 e5       	ldi	r30, 0x59	; 89
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	8c 93       	st	X, r24
    109e:	0b c0       	rjmp	.+22     	; 0x10b6 <M_TIMER0_void_EnableInt+0x44>
	}
	else if(TIMER0_SETTINGS_PARAMETERS.WGM == TIMER0_MODE_SELECTOR_CTC)
    10a0:	80 91 5d 02 	lds	r24, 0x025D
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	39 f4       	brne	.+14     	; 0x10b6 <M_TIMER0_void_EnableInt+0x44>
	{
		TIMSK_REG |= 0x02;
    10a8:	a9 e5       	ldi	r26, 0x59	; 89
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e9 e5       	ldi	r30, 0x59	; 89
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	82 60       	ori	r24, 0x02	; 2
    10b4:	8c 93       	st	X, r24
	}

}
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt()
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG &= 0xFE;
    10c4:	a9 e5       	ldi	r26, 0x59	; 89
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e9 e5       	ldi	r30, 0x59	; 89
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8e 7f       	andi	r24, 0xFE	; 254
    10d0:	8c 93       	st	X, r24
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <M_TIMER0_void_COMP_setCallBack>:


void M_TIMER0_void_COMP_setCallBack(void (*ptr)(void))
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <M_TIMER0_void_COMP_setCallBack+0x6>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	31 f0       	breq	.+12     	; 0x10fa <M_TIMER0_void_COMP_setCallBack+0x22>
	{
		TIMER0_COMP_CallBack = ptr;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	90 93 63 02 	sts	0x0263, r25
    10f6:	80 93 62 02 	sts	0x0262, r24
	}
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <M_TIMER0_void_OVF_setCallBack>:


void M_TIMER0_void_OVF_setCallBack(void (*ptr)(void))
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <M_TIMER0_void_OVF_setCallBack+0x6>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	31 f0       	breq	.+12     	; 0x1126 <M_TIMER0_void_OVF_setCallBack+0x22>
	{
		TIMER0_OVF_CallBack = ptr;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	90 93 61 02 	sts	0x0261, r25
    1122:	80 93 60 02 	sts	0x0260, r24
	}
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <M_TIMER0_void_setFastPWM>:


void M_TIMER0_void_setFastPWM(u32 Frequency ,u8 Duty)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <M_TIMER0_void_setFastPWM+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <M_TIMER0_void_setFastPWM+0x8>
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	69 83       	std	Y+1, r22	; 0x01
    1140:	7a 83       	std	Y+2, r23	; 0x02
    1142:	8b 83       	std	Y+3, r24	; 0x03
    1144:	9c 83       	std	Y+4, r25	; 0x04
    1146:	4d 83       	std	Y+5, r20	; 0x05
	OCR0_REG=100;
    1148:	ec e5       	ldi	r30, 0x5C	; 92
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	84 e6       	ldi	r24, 0x64	; 100
    114e:	80 83       	st	Z, r24
	TCCR0_REG &= TCCR0_CS_MASK;
    1150:	a3 e5       	ldi	r26, 0x53	; 83
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e3 e5       	ldi	r30, 0x53	; 83
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 7f       	andi	r24, 0xF8	; 248
    115c:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_CLK_SOURCE_8_PRESCALING;
    115e:	a3 e5       	ldi	r26, 0x53	; 83
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e3 e5       	ldi	r30, 0x53	; 83
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	82 60       	ori	r24, 0x02	; 2
    116a:	8c 93       	st	X, r24
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <M_TIMER0_void_setphaseCorrectPWM>:

void M_TIMER0_void_setphaseCorrectPWM(u32 Frequency ,u8 Duty)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <M_TIMER0_void_setphaseCorrectPWM+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <M_TIMER0_void_setphaseCorrectPWM+0x8>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	69 83       	std	Y+1, r22	; 0x01
    118c:	7a 83       	std	Y+2, r23	; 0x02
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	9c 83       	std	Y+4, r25	; 0x04
    1192:	4d 83       	std	Y+5, r20	; 0x05
//	OCR0_REG=(u8)255-(255*Duty/100);

//	u16 arr[]={1,8,64,256};


	OCR0_REG = (u8)(255*Duty/100);
    1194:	ec e5       	ldi	r30, 0x5C	; 92
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	48 2f       	mov	r20, r24
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	ca 01       	movw	r24, r20
    11a0:	9c 01       	movw	r18, r24
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	c9 01       	movw	r24, r18
    11a8:	96 95       	lsr	r25
    11aa:	98 2f       	mov	r25, r24
    11ac:	88 27       	eor	r24, r24
    11ae:	97 95       	ror	r25
    11b0:	87 95       	ror	r24
    11b2:	82 1b       	sub	r24, r18
    11b4:	93 0b       	sbc	r25, r19
    11b6:	84 0f       	add	r24, r20
    11b8:	95 1f       	adc	r25, r21
    11ba:	24 e6       	ldi	r18, 0x64	; 100
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	b9 01       	movw	r22, r18
    11c0:	0e 94 af 1a 	call	0x355e	; 0x355e <__divmodhi4>
    11c4:	cb 01       	movw	r24, r22
    11c6:	80 83       	st	Z, r24
	TCCR0_REG &= TCCR0_CS_MASK;
    11c8:	a3 e5       	ldi	r26, 0x53	; 83
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e3 e5       	ldi	r30, 0x53	; 83
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	88 7f       	andi	r24, 0xF8	; 248
    11d4:	8c 93       	st	X, r24
	TCCR0_REG |= Frequency;
    11d6:	a3 e5       	ldi	r26, 0x53	; 83
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e3 e5       	ldi	r30, 0x53	; 83
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	90 81       	ld	r25, Z
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	89 2b       	or	r24, r25
    11e4:	8c 93       	st	X, r24
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <__vector_10>:



void __vector_10 (void)
{
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_OVERFLOW_COUNTER++;
    1220:	80 91 64 02 	lds	r24, 0x0264
    1224:	90 91 65 02 	lds	r25, 0x0265
    1228:	a0 91 66 02 	lds	r26, 0x0266
    122c:	b0 91 67 02 	lds	r27, 0x0267
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	a1 1d       	adc	r26, r1
    1234:	b1 1d       	adc	r27, r1
    1236:	80 93 64 02 	sts	0x0264, r24
    123a:	90 93 65 02 	sts	0x0265, r25
    123e:	a0 93 66 02 	sts	0x0266, r26
    1242:	b0 93 67 02 	sts	0x0267, r27

	if(TIMER0_OVERFLOW_COUNTER==(TIMER0_REQUIRED_OVERFLOW_COUNTS+1))
    1246:	80 91 68 02 	lds	r24, 0x0268
    124a:	90 91 69 02 	lds	r25, 0x0269
    124e:	a0 91 6a 02 	lds	r26, 0x026A
    1252:	b0 91 6b 02 	lds	r27, 0x026B
    1256:	9c 01       	movw	r18, r24
    1258:	ad 01       	movw	r20, r26
    125a:	2f 5f       	subi	r18, 0xFF	; 255
    125c:	3f 4f       	sbci	r19, 0xFF	; 255
    125e:	4f 4f       	sbci	r20, 0xFF	; 255
    1260:	5f 4f       	sbci	r21, 0xFF	; 255
    1262:	80 91 64 02 	lds	r24, 0x0264
    1266:	90 91 65 02 	lds	r25, 0x0265
    126a:	a0 91 66 02 	lds	r26, 0x0266
    126e:	b0 91 67 02 	lds	r27, 0x0267
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	4a 07       	cpc	r20, r26
    1278:	5b 07       	cpc	r21, r27
    127a:	69 f4       	brne	.+26     	; 0x1296 <__vector_10+0xa0>
	{
		TIMER0_COMP_CallBack ();
    127c:	e0 91 62 02 	lds	r30, 0x0262
    1280:	f0 91 63 02 	lds	r31, 0x0263
    1284:	09 95       	icall
		TIMER0_OVERFLOW_COUNTER=0;
    1286:	10 92 64 02 	sts	0x0264, r1
    128a:	10 92 65 02 	sts	0x0265, r1
    128e:	10 92 66 02 	sts	0x0266, r1
    1292:	10 92 67 02 	sts	0x0267, r1
	}

}
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	ff 91       	pop	r31
    129c:	ef 91       	pop	r30
    129e:	bf 91       	pop	r27
    12a0:	af 91       	pop	r26
    12a2:	9f 91       	pop	r25
    12a4:	8f 91       	pop	r24
    12a6:	7f 91       	pop	r23
    12a8:	6f 91       	pop	r22
    12aa:	5f 91       	pop	r21
    12ac:	4f 91       	pop	r20
    12ae:	3f 91       	pop	r19
    12b0:	2f 91       	pop	r18
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <__vector_11>:


void __vector_11 (void)
{
    12bc:	1f 92       	push	r1
    12be:	0f 92       	push	r0
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	0f 92       	push	r0
    12c4:	11 24       	eor	r1, r1
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	TIMER0_OVERFLOW_COUNTER++;
    12e6:	80 91 64 02 	lds	r24, 0x0264
    12ea:	90 91 65 02 	lds	r25, 0x0265
    12ee:	a0 91 66 02 	lds	r26, 0x0266
    12f2:	b0 91 67 02 	lds	r27, 0x0267
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	a1 1d       	adc	r26, r1
    12fa:	b1 1d       	adc	r27, r1
    12fc:	80 93 64 02 	sts	0x0264, r24
    1300:	90 93 65 02 	sts	0x0265, r25
    1304:	a0 93 66 02 	sts	0x0266, r26
    1308:	b0 93 67 02 	sts	0x0267, r27

	if(TIMER0_OVERFLOW_COUNTER==(TIMER0_REQUIRED_OVERFLOW_COUNTS+1))
    130c:	80 91 68 02 	lds	r24, 0x0268
    1310:	90 91 69 02 	lds	r25, 0x0269
    1314:	a0 91 6a 02 	lds	r26, 0x026A
    1318:	b0 91 6b 02 	lds	r27, 0x026B
    131c:	9c 01       	movw	r18, r24
    131e:	ad 01       	movw	r20, r26
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	4f 4f       	sbci	r20, 0xFF	; 255
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	80 91 64 02 	lds	r24, 0x0264
    132c:	90 91 65 02 	lds	r25, 0x0265
    1330:	a0 91 66 02 	lds	r26, 0x0266
    1334:	b0 91 67 02 	lds	r27, 0x0267
    1338:	28 17       	cp	r18, r24
    133a:	39 07       	cpc	r19, r25
    133c:	4a 07       	cpc	r20, r26
    133e:	5b 07       	cpc	r21, r27
    1340:	69 f4       	brne	.+26     	; 0x135c <__vector_11+0xa0>
	{
		TIMER0_OVF_CallBack();
    1342:	e0 91 60 02 	lds	r30, 0x0260
    1346:	f0 91 61 02 	lds	r31, 0x0261
    134a:	09 95       	icall
		TIMER0_OVERFLOW_COUNTER=0;
    134c:	10 92 64 02 	sts	0x0264, r1
    1350:	10 92 65 02 	sts	0x0265, r1
    1354:	10 92 66 02 	sts	0x0266, r1
    1358:	10 92 67 02 	sts	0x0267, r1
	}
}
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	2b 97       	sbiw	r28, 0x0b	; 11
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	9d 83       	std	Y+5, r25	; 0x05
    1398:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <Port_Init+0x22>
    13a2:	40 c2       	rjmp	.+1152   	; 0x1824 <Port_Init+0x4a2>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    13a4:	1b 82       	std	Y+3, r1	; 0x03
    13a6:	3a c2       	rjmp	.+1140   	; 0x181c <Port_Init+0x49a>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 01       	movw	r18, r24
    13b0:	22 0f       	add	r18, r18
    13b2:	33 1f       	adc	r19, r19
    13b4:	22 0f       	add	r18, r18
    13b6:	33 1f       	adc	r19, r19
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	fc 01       	movw	r30, r24
    13be:	e2 0f       	add	r30, r18
    13c0:	f3 1f       	adc	r31, r19
    13c2:	80 81       	ld	r24, Z
    13c4:	9a e0       	ldi	r25, 0x0A	; 10
    13c6:	69 2f       	mov	r22, r25
    13c8:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodqi4>
    13cc:	89 2f       	mov	r24, r25
    13ce:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 01       	movw	r18, r24
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	22 0f       	add	r18, r18
    13de:	33 1f       	adc	r19, r19
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	fc 01       	movw	r30, r24
    13e6:	e2 0f       	add	r30, r18
    13e8:	f3 1f       	adc	r31, r19
    13ea:	80 81       	ld	r24, Z
    13ec:	9a e0       	ldi	r25, 0x0A	; 10
    13ee:	69 2f       	mov	r22, r25
    13f0:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodqi4>
    13f4:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9c 01       	movw	r18, r24
    13fe:	22 0f       	add	r18, r18
    1400:	33 1f       	adc	r19, r19
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	fc 01       	movw	r30, r24
    140c:	e2 0f       	add	r30, r18
    140e:	f3 1f       	adc	r31, r19
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	88 23       	and	r24, r24
    1414:	89 f0       	breq	.+34     	; 0x1438 <Port_Init+0xb6>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 01       	movw	r18, r24
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	fc 01       	movw	r30, r24
    142c:	e2 0f       	add	r30, r18
    142e:	f3 1f       	adc	r31, r19
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	09 f0       	breq	.+2      	; 0x1438 <Port_Init+0xb6>
    1436:	ef c1       	rjmp	.+990    	; 0x1816 <Port_Init+0x494>
				{
					switch(Local_port)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3b 87       	std	Y+11, r19	; 0x0b
    1440:	2a 87       	std	Y+10, r18	; 0x0a
    1442:	6a 85       	ldd	r22, Y+10	; 0x0a
    1444:	7b 85       	ldd	r23, Y+11	; 0x0b
    1446:	62 30       	cpi	r22, 0x02	; 2
    1448:	71 05       	cpc	r23, r1
    144a:	d1 f1       	breq	.+116    	; 0x14c0 <Port_Init+0x13e>
    144c:	8a 85       	ldd	r24, Y+10	; 0x0a
    144e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	91 05       	cpc	r25, r1
    1454:	34 f4       	brge	.+12     	; 0x1462 <Port_Init+0xe0>
    1456:	2a 85       	ldd	r18, Y+10	; 0x0a
    1458:	3b 85       	ldd	r19, Y+11	; 0x0b
    145a:	21 30       	cpi	r18, 0x01	; 1
    145c:	31 05       	cpc	r19, r1
    145e:	71 f0       	breq	.+28     	; 0x147c <Port_Init+0xfa>
    1460:	94 c0       	rjmp	.+296    	; 0x158a <Port_Init+0x208>
    1462:	6a 85       	ldd	r22, Y+10	; 0x0a
    1464:	7b 85       	ldd	r23, Y+11	; 0x0b
    1466:	63 30       	cpi	r22, 0x03	; 3
    1468:	71 05       	cpc	r23, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <Port_Init+0xec>
    146c:	4b c0       	rjmp	.+150    	; 0x1504 <Port_Init+0x182>
    146e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1470:	9b 85       	ldd	r25, Y+11	; 0x0b
    1472:	84 30       	cpi	r24, 0x04	; 4
    1474:	91 05       	cpc	r25, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <Port_Init+0xf8>
    1478:	67 c0       	rjmp	.+206    	; 0x1548 <Port_Init+0x1c6>
    147a:	87 c0       	rjmp	.+270    	; 0x158a <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    147c:	aa e3       	ldi	r26, 0x3A	; 58
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ea e3       	ldi	r30, 0x3A	; 58
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	40 81       	ld	r20, Z
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	9c 01       	movw	r18, r24
    148e:	22 0f       	add	r18, r18
    1490:	33 1f       	adc	r19, r19
    1492:	22 0f       	add	r18, r18
    1494:	33 1f       	adc	r19, r19
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	fc 01       	movw	r30, r24
    149c:	e2 0f       	add	r30, r18
    149e:	f3 1f       	adc	r31, r19
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	b9 01       	movw	r22, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <Port_Init+0x132>
    14b0:	66 0f       	add	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <Port_Init+0x12e>
    14b8:	cb 01       	movw	r24, r22
    14ba:	84 2b       	or	r24, r20
    14bc:	8c 93       	st	X, r24
    14be:	65 c0       	rjmp	.+202    	; 0x158a <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    14c0:	a7 e3       	ldi	r26, 0x37	; 55
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e7 e3       	ldi	r30, 0x37	; 55
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	40 81       	ld	r20, Z
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9c 01       	movw	r18, r24
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	fc 01       	movw	r30, r24
    14e0:	e2 0f       	add	r30, r18
    14e2:	f3 1f       	adc	r31, r19
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	b9 01       	movw	r22, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <Port_Init+0x176>
    14f4:	66 0f       	add	r22, r22
    14f6:	77 1f       	adc	r23, r23
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <Port_Init+0x172>
    14fc:	cb 01       	movw	r24, r22
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	43 c0       	rjmp	.+134    	; 0x158a <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1504:	a4 e3       	ldi	r26, 0x34	; 52
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e4 e3       	ldi	r30, 0x34	; 52
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	40 81       	ld	r20, Z
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9c 01       	movw	r18, r24
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	22 0f       	add	r18, r18
    151c:	33 1f       	adc	r19, r19
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	fc 01       	movw	r30, r24
    1524:	e2 0f       	add	r30, r18
    1526:	f3 1f       	adc	r31, r19
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	b9 01       	movw	r22, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <Port_Init+0x1ba>
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	8a 95       	dec	r24
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <Port_Init+0x1b6>
    1540:	cb 01       	movw	r24, r22
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	21 c0       	rjmp	.+66     	; 0x158a <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1548:	a1 e3       	ldi	r26, 0x31	; 49
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e1 e3       	ldi	r30, 0x31	; 49
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	40 81       	ld	r20, Z
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9c 01       	movw	r18, r24
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	22 0f       	add	r18, r18
    1560:	33 1f       	adc	r19, r19
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	fc 01       	movw	r30, r24
    1568:	e2 0f       	add	r30, r18
    156a:	f3 1f       	adc	r31, r19
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	b9 01       	movw	r22, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <Port_Init+0x1fe>
    157c:	66 0f       	add	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <Port_Init+0x1fa>
    1584:	cb 01       	movw	r24, r22
    1586:	84 2b       	or	r24, r20
    1588:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9c 01       	movw	r18, r24
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	fc 01       	movw	r30, r24
    15a0:	e2 0f       	add	r30, r18
    15a2:	f3 1f       	adc	r31, r19
    15a4:	81 81       	ldd	r24, Z+1	; 0x01
    15a6:	88 23       	and	r24, r24
    15a8:	89 f0       	breq	.+34     	; 0x15cc <Port_Init+0x24a>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9c 01       	movw	r18, r24
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	fc 01       	movw	r30, r24
    15c0:	e2 0f       	add	r30, r18
    15c2:	f3 1f       	adc	r31, r19
    15c4:	81 81       	ldd	r24, Z+1	; 0x01
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <Port_Init+0x24a>
    15ca:	25 c1       	rjmp	.+586    	; 0x1816 <Port_Init+0x494>
					{
						switch(Local_port)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	39 87       	std	Y+9, r19	; 0x09
    15d4:	28 87       	std	Y+8, r18	; 0x08
    15d6:	68 85       	ldd	r22, Y+8	; 0x08
    15d8:	79 85       	ldd	r23, Y+9	; 0x09
    15da:	62 30       	cpi	r22, 0x02	; 2
    15dc:	71 05       	cpc	r23, r1
    15de:	d1 f1       	breq	.+116    	; 0x1654 <Port_Init+0x2d2>
    15e0:	88 85       	ldd	r24, Y+8	; 0x08
    15e2:	99 85       	ldd	r25, Y+9	; 0x09
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	34 f4       	brge	.+12     	; 0x15f6 <Port_Init+0x274>
    15ea:	28 85       	ldd	r18, Y+8	; 0x08
    15ec:	39 85       	ldd	r19, Y+9	; 0x09
    15ee:	21 30       	cpi	r18, 0x01	; 1
    15f0:	31 05       	cpc	r19, r1
    15f2:	71 f0       	breq	.+28     	; 0x1610 <Port_Init+0x28e>
    15f4:	94 c0       	rjmp	.+296    	; 0x171e <Port_Init+0x39c>
    15f6:	68 85       	ldd	r22, Y+8	; 0x08
    15f8:	79 85       	ldd	r23, Y+9	; 0x09
    15fa:	63 30       	cpi	r22, 0x03	; 3
    15fc:	71 05       	cpc	r23, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <Port_Init+0x280>
    1600:	4b c0       	rjmp	.+150    	; 0x1698 <Port_Init+0x316>
    1602:	88 85       	ldd	r24, Y+8	; 0x08
    1604:	99 85       	ldd	r25, Y+9	; 0x09
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	91 05       	cpc	r25, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <Port_Init+0x28c>
    160c:	67 c0       	rjmp	.+206    	; 0x16dc <Port_Init+0x35a>
    160e:	87 c0       	rjmp	.+270    	; 0x171e <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1610:	ab e3       	ldi	r26, 0x3B	; 59
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	eb e3       	ldi	r30, 0x3B	; 59
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	40 81       	ld	r20, Z
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9c 01       	movw	r18, r24
    1622:	22 0f       	add	r18, r18
    1624:	33 1f       	adc	r19, r19
    1626:	22 0f       	add	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	9d 81       	ldd	r25, Y+5	; 0x05
    162e:	fc 01       	movw	r30, r24
    1630:	e2 0f       	add	r30, r18
    1632:	f3 1f       	adc	r31, r19
    1634:	81 81       	ldd	r24, Z+1	; 0x01
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	b9 01       	movw	r22, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <Port_Init+0x2c6>
    1644:	66 0f       	add	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	8a 95       	dec	r24
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <Port_Init+0x2c2>
    164c:	cb 01       	movw	r24, r22
    164e:	84 2b       	or	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	65 c0       	rjmp	.+202    	; 0x171e <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1654:	a8 e3       	ldi	r26, 0x38	; 56
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e8 e3       	ldi	r30, 0x38	; 56
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	40 81       	ld	r20, Z
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9c 01       	movw	r18, r24
    1666:	22 0f       	add	r18, r18
    1668:	33 1f       	adc	r19, r19
    166a:	22 0f       	add	r18, r18
    166c:	33 1f       	adc	r19, r19
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	fc 01       	movw	r30, r24
    1674:	e2 0f       	add	r30, r18
    1676:	f3 1f       	adc	r31, r19
    1678:	81 81       	ldd	r24, Z+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b9 01       	movw	r22, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <Port_Init+0x30a>
    1688:	66 0f       	add	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	8a 95       	dec	r24
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <Port_Init+0x306>
    1690:	cb 01       	movw	r24, r22
    1692:	84 2b       	or	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	43 c0       	rjmp	.+134    	; 0x171e <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1698:	a5 e3       	ldi	r26, 0x35	; 53
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	40 81       	ld	r20, Z
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9c 01       	movw	r18, r24
    16aa:	22 0f       	add	r18, r18
    16ac:	33 1f       	adc	r19, r19
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	9d 81       	ldd	r25, Y+5	; 0x05
    16b6:	fc 01       	movw	r30, r24
    16b8:	e2 0f       	add	r30, r18
    16ba:	f3 1f       	adc	r31, r19
    16bc:	81 81       	ldd	r24, Z+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	b9 01       	movw	r22, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <Port_Init+0x34e>
    16cc:	66 0f       	add	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	8a 95       	dec	r24
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <Port_Init+0x34a>
    16d4:	cb 01       	movw	r24, r22
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	21 c0       	rjmp	.+66     	; 0x171e <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    16dc:	a2 e3       	ldi	r26, 0x32	; 50
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e2 e3       	ldi	r30, 0x32	; 50
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	40 81       	ld	r20, Z
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9c 01       	movw	r18, r24
    16ee:	22 0f       	add	r18, r18
    16f0:	33 1f       	adc	r19, r19
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	fc 01       	movw	r30, r24
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 1f       	adc	r31, r19
    1700:	81 81       	ldd	r24, Z+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	b9 01       	movw	r22, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <Port_Init+0x392>
    1710:	66 0f       	add	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	8a 95       	dec	r24
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <Port_Init+0x38e>
    1718:	cb 01       	movw	r24, r22
    171a:	84 2b       	or	r24, r20
    171c:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 01       	movw	r18, r24
    1726:	22 0f       	add	r18, r18
    1728:	33 1f       	adc	r19, r19
    172a:	22 0f       	add	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	9d 81       	ldd	r25, Y+5	; 0x05
    1732:	fc 01       	movw	r30, r24
    1734:	e2 0f       	add	r30, r18
    1736:	f3 1f       	adc	r31, r19
    1738:	83 81       	ldd	r24, Z+3	; 0x03
    173a:	88 23       	and	r24, r24
    173c:	09 f0       	breq	.+2      	; 0x1740 <Port_Init+0x3be>
    173e:	6b c0       	rjmp	.+214    	; 0x1816 <Port_Init+0x494>
						{
							switch(Local_port)
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	3f 83       	std	Y+7, r19	; 0x07
    1748:	2e 83       	std	Y+6, r18	; 0x06
    174a:	6e 81       	ldd	r22, Y+6	; 0x06
    174c:	7f 81       	ldd	r23, Y+7	; 0x07
    174e:	62 30       	cpi	r22, 0x02	; 2
    1750:	71 05       	cpc	r23, r1
    1752:	49 f1       	breq	.+82     	; 0x17a6 <Port_Init+0x424>
    1754:	8e 81       	ldd	r24, Y+6	; 0x06
    1756:	9f 81       	ldd	r25, Y+7	; 0x07
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	34 f4       	brge	.+12     	; 0x176a <Port_Init+0x3e8>
    175e:	2e 81       	ldd	r18, Y+6	; 0x06
    1760:	3f 81       	ldd	r19, Y+7	; 0x07
    1762:	21 30       	cpi	r18, 0x01	; 1
    1764:	31 05       	cpc	r19, r1
    1766:	61 f0       	breq	.+24     	; 0x1780 <Port_Init+0x3fe>
    1768:	56 c0       	rjmp	.+172    	; 0x1816 <Port_Init+0x494>
    176a:	6e 81       	ldd	r22, Y+6	; 0x06
    176c:	7f 81       	ldd	r23, Y+7	; 0x07
    176e:	63 30       	cpi	r22, 0x03	; 3
    1770:	71 05       	cpc	r23, r1
    1772:	61 f1       	breq	.+88     	; 0x17cc <Port_Init+0x44a>
    1774:	8e 81       	ldd	r24, Y+6	; 0x06
    1776:	9f 81       	ldd	r25, Y+7	; 0x07
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	91 05       	cpc	r25, r1
    177c:	d1 f1       	breq	.+116    	; 0x17f2 <Port_Init+0x470>
    177e:	4b c0       	rjmp	.+150    	; 0x1816 <Port_Init+0x494>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	40 81       	ld	r20, Z
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <Port_Init+0x41a>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <Port_Init+0x416>
    17a0:	84 2b       	or	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	38 c0       	rjmp	.+112    	; 0x1816 <Port_Init+0x494>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    17a6:	a8 e3       	ldi	r26, 0x38	; 56
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	40 81       	ld	r20, Z
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <Port_Init+0x440>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <Port_Init+0x43c>
    17c6:	84 2b       	or	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	25 c0       	rjmp	.+74     	; 0x1816 <Port_Init+0x494>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    17cc:	a5 e3       	ldi	r26, 0x35	; 53
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e3       	ldi	r30, 0x35	; 53
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	40 81       	ld	r20, Z
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <Port_Init+0x466>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <Port_Init+0x462>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	12 c0       	rjmp	.+36     	; 0x1816 <Port_Init+0x494>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    17f2:	a2 e3       	ldi	r26, 0x32	; 50
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e2 e3       	ldi	r30, 0x32	; 50
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	40 81       	ld	r20, Z
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <Port_Init+0x48c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <Port_Init+0x488>
    1812:	84 2b       	or	r24, r20
    1814:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	8f 5f       	subi	r24, 0xFF	; 255
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	8c 31       	cpi	r24, 0x1C	; 28
    1820:	08 f4       	brcc	.+2      	; 0x1824 <Port_Init+0x4a2>
    1822:	c2 cd       	rjmp	.-1148   	; 0x13a8 <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    1824:	2b 96       	adiw	r28, 0x0b	; 11
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <M_GID_void_Enable>:

#include "Mcu_HW.h"
#include "GID_int.h"

void M_GID_void_Enable(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= 0x80;
    183e:	af e5       	ldi	r26, 0x5F	; 95
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ef e5       	ldi	r30, 0x5F	; 95
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 68       	ori	r24, 0x80	; 128
    184a:	8c 93       	st	X, r24
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <M_GID_void_Disable>:
void M_GID_void_Disable(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= 0x7F;
    185a:	af e5       	ldi	r26, 0x5F	; 95
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ef e5       	ldi	r30, 0x5F	; 95
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 77       	andi	r24, 0x7F	; 127
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <M_Dio_en_getPinValue+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <M_Dio_en_getPinValue+0x8>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <M_Dio_en_getPinValue+0xa>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9a e0       	ldi	r25, 0x0A	; 10
    1882:	69 2f       	mov	r22, r25
    1884:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodqi4>
    1888:	89 2f       	mov	r24, r25
    188a:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	9a e0       	ldi	r25, 0x0A	; 10
    1890:	69 2f       	mov	r22, r25
    1892:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodqi4>
    1896:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3e 83       	std	Y+6, r19	; 0x06
    18a0:	2d 83       	std	Y+5, r18	; 0x05
    18a2:	4d 81       	ldd	r20, Y+5	; 0x05
    18a4:	5e 81       	ldd	r21, Y+6	; 0x06
    18a6:	42 30       	cpi	r20, 0x02	; 2
    18a8:	51 05       	cpc	r21, r1
    18aa:	41 f1       	breq	.+80     	; 0x18fc <M_Dio_en_getPinValue+0x8e>
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	83 30       	cpi	r24, 0x03	; 3
    18b2:	91 05       	cpc	r25, r1
    18b4:	34 f4       	brge	.+12     	; 0x18c2 <M_Dio_en_getPinValue+0x54>
    18b6:	2d 81       	ldd	r18, Y+5	; 0x05
    18b8:	3e 81       	ldd	r19, Y+6	; 0x06
    18ba:	21 30       	cpi	r18, 0x01	; 1
    18bc:	31 05       	cpc	r19, r1
    18be:	61 f0       	breq	.+24     	; 0x18d8 <M_Dio_en_getPinValue+0x6a>
    18c0:	52 c0       	rjmp	.+164    	; 0x1966 <M_Dio_en_getPinValue+0xf8>
    18c2:	4d 81       	ldd	r20, Y+5	; 0x05
    18c4:	5e 81       	ldd	r21, Y+6	; 0x06
    18c6:	43 30       	cpi	r20, 0x03	; 3
    18c8:	51 05       	cpc	r21, r1
    18ca:	51 f1       	breq	.+84     	; 0x1920 <M_Dio_en_getPinValue+0xb2>
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	84 30       	cpi	r24, 0x04	; 4
    18d2:	91 05       	cpc	r25, r1
    18d4:	b9 f1       	breq	.+110    	; 0x1944 <M_Dio_en_getPinValue+0xd6>
    18d6:	47 c0       	rjmp	.+142    	; 0x1966 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    18d8:	e9 e3       	ldi	r30, 0x39	; 57
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a9 01       	movw	r20, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <M_Dio_en_getPinValue+0x82>
    18ec:	55 95       	asr	r21
    18ee:	47 95       	ror	r20
    18f0:	8a 95       	dec	r24
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <M_Dio_en_getPinValue+0x7e>
    18f4:	ca 01       	movw	r24, r20
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	35 c0       	rjmp	.+106    	; 0x1966 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    18fc:	e6 e3       	ldi	r30, 0x36	; 54
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a9 01       	movw	r20, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <M_Dio_en_getPinValue+0xa6>
    1910:	55 95       	asr	r21
    1912:	47 95       	ror	r20
    1914:	8a 95       	dec	r24
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <M_Dio_en_getPinValue+0xa2>
    1918:	ca 01       	movw	r24, r20
    191a:	81 70       	andi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	23 c0       	rjmp	.+70     	; 0x1966 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    1920:	e3 e3       	ldi	r30, 0x33	; 51
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a9 01       	movw	r20, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <M_Dio_en_getPinValue+0xca>
    1934:	55 95       	asr	r21
    1936:	47 95       	ror	r20
    1938:	8a 95       	dec	r24
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <M_Dio_en_getPinValue+0xc6>
    193c:	ca 01       	movw	r24, r20
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	11 c0       	rjmp	.+34     	; 0x1966 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    1944:	e0 e3       	ldi	r30, 0x30	; 48
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a9 01       	movw	r20, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <M_Dio_en_getPinValue+0xee>
    1958:	55 95       	asr	r21
    195a:	47 95       	ror	r20
    195c:	8a 95       	dec	r24
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <M_Dio_en_getPinValue+0xea>
    1960:	ca 01       	movw	r24, r20
    1962:	81 70       	andi	r24, 0x01	; 1
    1964:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
}
    1968:	26 96       	adiw	r28, 0x06	; 6
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	28 97       	sbiw	r28, 0x08	; 8
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9a e0       	ldi	r25, 0x0A	; 10
    1996:	69 2f       	mov	r22, r25
    1998:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodqi4>
    199c:	89 2f       	mov	r24, r25
    199e:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9a e0       	ldi	r25, 0x0A	; 10
    19a4:	69 2f       	mov	r22, r25
    19a6:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodqi4>
    19aa:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <M_Dio_void_setPinValue+0x3a>
    19b2:	70 c0       	rjmp	.+224    	; 0x1a94 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	38 87       	std	Y+8, r19	; 0x08
    19bc:	2f 83       	std	Y+7, r18	; 0x07
    19be:	8f 81       	ldd	r24, Y+7	; 0x07
    19c0:	98 85       	ldd	r25, Y+8	; 0x08
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	91 05       	cpc	r25, r1
    19c6:	51 f1       	breq	.+84     	; 0x1a1c <M_Dio_void_setPinValue+0xa2>
    19c8:	2f 81       	ldd	r18, Y+7	; 0x07
    19ca:	38 85       	ldd	r19, Y+8	; 0x08
    19cc:	23 30       	cpi	r18, 0x03	; 3
    19ce:	31 05       	cpc	r19, r1
    19d0:	34 f4       	brge	.+12     	; 0x19de <M_Dio_void_setPinValue+0x64>
    19d2:	8f 81       	ldd	r24, Y+7	; 0x07
    19d4:	98 85       	ldd	r25, Y+8	; 0x08
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	61 f0       	breq	.+24     	; 0x19f4 <M_Dio_void_setPinValue+0x7a>
    19dc:	d3 c0       	rjmp	.+422    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
    19de:	2f 81       	ldd	r18, Y+7	; 0x07
    19e0:	38 85       	ldd	r19, Y+8	; 0x08
    19e2:	23 30       	cpi	r18, 0x03	; 3
    19e4:	31 05       	cpc	r19, r1
    19e6:	71 f1       	breq	.+92     	; 0x1a44 <M_Dio_void_setPinValue+0xca>
    19e8:	8f 81       	ldd	r24, Y+7	; 0x07
    19ea:	98 85       	ldd	r25, Y+8	; 0x08
    19ec:	84 30       	cpi	r24, 0x04	; 4
    19ee:	91 05       	cpc	r25, r1
    19f0:	e9 f1       	breq	.+122    	; 0x1a6c <M_Dio_void_setPinValue+0xf2>
    19f2:	c8 c0       	rjmp	.+400    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    19f4:	ab e3       	ldi	r26, 0x3B	; 59
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	eb e3       	ldi	r30, 0x3B	; 59
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <M_Dio_void_setPinValue+0x98>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <M_Dio_void_setPinValue+0x94>
    1a16:	84 2b       	or	r24, r20
    1a18:	8c 93       	st	X, r24
    1a1a:	b4 c0       	rjmp	.+360    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    1a1c:	a8 e3       	ldi	r26, 0x38	; 56
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e8 e3       	ldi	r30, 0x38	; 56
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 2e       	mov	r0, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <M_Dio_void_setPinValue+0xc0>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <M_Dio_void_setPinValue+0xbc>
    1a3e:	84 2b       	or	r24, r20
    1a40:	8c 93       	st	X, r24
    1a42:	a0 c0       	rjmp	.+320    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    1a44:	a5 e3       	ldi	r26, 0x35	; 53
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e5 e3       	ldi	r30, 0x35	; 53
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <M_Dio_void_setPinValue+0xe8>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <M_Dio_void_setPinValue+0xe4>
    1a66:	84 2b       	or	r24, r20
    1a68:	8c 93       	st	X, r24
    1a6a:	8c c0       	rjmp	.+280    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    1a6c:	a2 e3       	ldi	r26, 0x32	; 50
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e2 e3       	ldi	r30, 0x32	; 50
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <M_Dio_void_setPinValue+0x110>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <M_Dio_void_setPinValue+0x10c>
    1a8e:	84 2b       	or	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	78 c0       	rjmp	.+240    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		}
	}
	else if (Level == DIO_LOW)
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	88 23       	and	r24, r24
    1a98:	09 f0       	breq	.+2      	; 0x1a9c <M_Dio_void_setPinValue+0x122>
    1a9a:	74 c0       	rjmp	.+232    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	3e 83       	std	Y+6, r19	; 0x06
    1aa4:	2d 83       	std	Y+5, r18	; 0x05
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	91 05       	cpc	r25, r1
    1aae:	61 f1       	breq	.+88     	; 0x1b08 <M_Dio_void_setPinValue+0x18e>
    1ab0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab4:	23 30       	cpi	r18, 0x03	; 3
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	34 f4       	brge	.+12     	; 0x1ac6 <M_Dio_void_setPinValue+0x14c>
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	69 f0       	breq	.+26     	; 0x1ade <M_Dio_void_setPinValue+0x164>
    1ac4:	5f c0       	rjmp	.+190    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
    1ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aca:	23 30       	cpi	r18, 0x03	; 3
    1acc:	31 05       	cpc	r19, r1
    1ace:	89 f1       	breq	.+98     	; 0x1b32 <M_Dio_void_setPinValue+0x1b8>
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	84 30       	cpi	r24, 0x04	; 4
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <M_Dio_void_setPinValue+0x162>
    1ada:	40 c0       	rjmp	.+128    	; 0x1b5c <M_Dio_void_setPinValue+0x1e2>
    1adc:	53 c0       	rjmp	.+166    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    1ade:	ab e3       	ldi	r26, 0x3B	; 59
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	eb e3       	ldi	r30, 0x3B	; 59
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <M_Dio_void_setPinValue+0x182>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <M_Dio_void_setPinValue+0x17e>
    1b00:	80 95       	com	r24
    1b02:	84 23       	and	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	3e c0       	rjmp	.+124    	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    1b08:	a8 e3       	ldi	r26, 0x38	; 56
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <M_Dio_void_setPinValue+0x1ac>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <M_Dio_void_setPinValue+0x1a8>
    1b2a:	80 95       	com	r24
    1b2c:	84 23       	and	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	29 c0       	rjmp	.+82     	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    1b32:	a5 e3       	ldi	r26, 0x35	; 53
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e5 e3       	ldi	r30, 0x35	; 53
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <M_Dio_void_setPinValue+0x1d6>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <M_Dio_void_setPinValue+0x1d2>
    1b54:	80 95       	com	r24
    1b56:	84 23       	and	r24, r20
    1b58:	8c 93       	st	X, r24
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    1b5c:	a2 e3       	ldi	r26, 0x32	; 50
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e2 e3       	ldi	r30, 0x32	; 50
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <M_Dio_void_setPinValue+0x200>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <M_Dio_void_setPinValue+0x1fc>
    1b7e:	80 95       	com	r24
    1b80:	84 23       	and	r24, r20
    1b82:	8c 93       	st	X, r24
		}
	}

}
    1b84:	28 96       	adiw	r28, 0x08	; 8
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <M_Dio_en_getPortValue+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <M_Dio_en_getPortValue+0x8>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3c 83       	std	Y+4, r19	; 0x04
    1bac:	2b 83       	std	Y+3, r18	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	82 30       	cpi	r24, 0x02	; 2
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	d9 f0       	breq	.+54     	; 0x1bee <M_Dio_en_getPortValue+0x58>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	23 30       	cpi	r18, 0x03	; 3
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	34 f4       	brge	.+12     	; 0x1bce <M_Dio_en_getPortValue+0x38>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	91 05       	cpc	r25, r1
    1bca:	61 f0       	breq	.+24     	; 0x1be4 <M_Dio_en_getPortValue+0x4e>
    1bcc:	1e c0       	rjmp	.+60     	; 0x1c0a <M_Dio_en_getPortValue+0x74>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	23 30       	cpi	r18, 0x03	; 3
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	81 f0       	breq	.+32     	; 0x1bf8 <M_Dio_en_getPortValue+0x62>
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	84 30       	cpi	r24, 0x04	; 4
    1bde:	91 05       	cpc	r25, r1
    1be0:	81 f0       	breq	.+32     	; 0x1c02 <M_Dio_en_getPortValue+0x6c>
    1be2:	13 c0       	rjmp	.+38     	; 0x1c0a <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    1be4:	eb e3       	ldi	r30, 0x3B	; 59
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	0e c0       	rjmp	.+28     	; 0x1c0a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    1bee:	e8 e3       	ldi	r30, 0x38	; 56
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	09 c0       	rjmp	.+18     	; 0x1c0a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    1bf8:	e5 e3       	ldi	r30, 0x35	; 53
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	04 c0       	rjmp	.+8      	; 0x1c0a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    1c02:	e2 e3       	ldi	r30, 0x32	; 50
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <M_Dio_void_setPortValue+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <M_Dio_void_setPortValue+0x8>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	3c 83       	std	Y+4, r19	; 0x04
    1c32:	2b 83       	std	Y+3, r18	; 0x03
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	82 30       	cpi	r24, 0x02	; 2
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	d9 f0       	breq	.+54     	; 0x1c74 <M_Dio_void_setPortValue+0x5a>
    1c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c40:	3c 81       	ldd	r19, Y+4	; 0x04
    1c42:	23 30       	cpi	r18, 0x03	; 3
    1c44:	31 05       	cpc	r19, r1
    1c46:	34 f4       	brge	.+12     	; 0x1c54 <M_Dio_void_setPortValue+0x3a>
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <M_Dio_void_setPortValue+0x50>
    1c52:	1e c0       	rjmp	.+60     	; 0x1c90 <M_Dio_void_setPortValue+0x76>
    1c54:	2b 81       	ldd	r18, Y+3	; 0x03
    1c56:	3c 81       	ldd	r19, Y+4	; 0x04
    1c58:	23 30       	cpi	r18, 0x03	; 3
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	81 f0       	breq	.+32     	; 0x1c7e <M_Dio_void_setPortValue+0x64>
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	84 30       	cpi	r24, 0x04	; 4
    1c64:	91 05       	cpc	r25, r1
    1c66:	81 f0       	breq	.+32     	; 0x1c88 <M_Dio_void_setPortValue+0x6e>
    1c68:	13 c0       	rjmp	.+38     	; 0x1c90 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    1c6a:	eb e3       	ldi	r30, 0x3B	; 59
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	80 83       	st	Z, r24
    1c72:	0e c0       	rjmp	.+28     	; 0x1c90 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    1c74:	e8 e3       	ldi	r30, 0x38	; 56
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	80 83       	st	Z, r24
    1c7c:	09 c0       	rjmp	.+18     	; 0x1c90 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    1c7e:	e5 e3       	ldi	r30, 0x35	; 53
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	80 83       	st	Z, r24
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    1c88:	e2 e3       	ldi	r30, 0x32	; 50
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	80 83       	st	Z, r24
	}
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <M_Dio_void_togglePinValue+0x6>
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <M_Dio_void_togglePinValue+0x8>
    1ca6:	0f 92       	push	r0
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9a e0       	ldi	r25, 0x0A	; 10
    1cb2:	69 2f       	mov	r22, r25
    1cb4:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodqi4>
    1cb8:	89 2f       	mov	r24, r25
    1cba:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9a e0       	ldi	r25, 0x0A	; 10
    1cc0:	69 2f       	mov	r22, r25
    1cc2:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodqi4>
    1cc6:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	3d 83       	std	Y+5, r19	; 0x05
    1cd0:	2c 83       	std	Y+4, r18	; 0x04
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	91 05       	cpc	r25, r1
    1cda:	51 f1       	breq	.+84     	; 0x1d30 <M_Dio_void_togglePinValue+0x92>
    1cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cde:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce0:	23 30       	cpi	r18, 0x03	; 3
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	34 f4       	brge	.+12     	; 0x1cf2 <M_Dio_void_togglePinValue+0x54>
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	91 05       	cpc	r25, r1
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <M_Dio_void_togglePinValue+0x6a>
    1cf0:	5a c0       	rjmp	.+180    	; 0x1da6 <M_Dio_void_togglePinValue+0x108>
    1cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf6:	23 30       	cpi	r18, 0x03	; 3
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	71 f1       	breq	.+92     	; 0x1d58 <M_Dio_void_togglePinValue+0xba>
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	91 05       	cpc	r25, r1
    1d04:	e9 f1       	breq	.+122    	; 0x1d80 <M_Dio_void_togglePinValue+0xe2>
    1d06:	4f c0       	rjmp	.+158    	; 0x1da6 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    1d08:	ab e3       	ldi	r26, 0x3B	; 59
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	eb e3       	ldi	r30, 0x3B	; 59
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <M_Dio_void_togglePinValue+0x88>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <M_Dio_void_togglePinValue+0x84>
    1d2a:	84 27       	eor	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	3b c0       	rjmp	.+118    	; 0x1da6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    1d30:	a8 e3       	ldi	r26, 0x38	; 56
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <M_Dio_void_togglePinValue+0xb0>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <M_Dio_void_togglePinValue+0xac>
    1d52:	84 27       	eor	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	27 c0       	rjmp	.+78     	; 0x1da6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    1d58:	a5 e3       	ldi	r26, 0x35	; 53
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e5 e3       	ldi	r30, 0x35	; 53
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <M_Dio_void_togglePinValue+0xd8>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <M_Dio_void_togglePinValue+0xd4>
    1d7a:	84 27       	eor	r24, r20
    1d7c:	8c 93       	st	X, r24
    1d7e:	13 c0       	rjmp	.+38     	; 0x1da6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    1d80:	a2 e3       	ldi	r26, 0x32	; 50
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e2 e3       	ldi	r30, 0x32	; 50
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <M_Dio_void_togglePinValue+0x100>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <M_Dio_void_togglePinValue+0xfc>
    1da2:	84 27       	eor	r24, r20
    1da4:	8c 93       	st	X, r24
	}

}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <H_LCD_void_latchByte>:
#include "LCD_int.h"



static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	c1 56       	subi	r28, 0x61	; 97
    1dc4:	d0 40       	sbci	r29, 0x00	; 0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	ef 59       	subi	r30, 0x9F	; 159
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 83       	st	Z, r24
#if(LCD_MODE == _4_BIT_MODE)
	{
		/*
		 * HIGH LEVEL PINS
		 */
		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=0
    1dd8:	8c e0       	ldi	r24, 0x0C	; 12
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D4_PIN,GET_BIT(copy_u8Byte,4));
    1de0:	fe 01       	movw	r30, r28
    1de2:	ef 59       	subi	r30, 0x9F	; 159
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	82 95       	swap	r24
    1dea:	8f 70       	andi	r24, 0x0F	; 15
    1dec:	98 2f       	mov	r25, r24
    1dee:	91 70       	andi	r25, 0x01	; 1
    1df0:	84 e1       	ldi	r24, 0x14	; 20
    1df2:	69 2f       	mov	r22, r25
    1df4:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D5_PIN,GET_BIT(copy_u8Byte,5));
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ef 59       	subi	r30, 0x9F	; 159
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	82 95       	swap	r24
    1e02:	86 95       	lsr	r24
    1e04:	87 70       	andi	r24, 0x07	; 7
    1e06:	98 2f       	mov	r25, r24
    1e08:	91 70       	andi	r25, 0x01	; 1
    1e0a:	85 e1       	ldi	r24, 0x15	; 21
    1e0c:	69 2f       	mov	r22, r25
    1e0e:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D6_PIN,GET_BIT(copy_u8Byte,6));
    1e12:	fe 01       	movw	r30, r28
    1e14:	ef 59       	subi	r30, 0x9F	; 159
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	82 95       	swap	r24
    1e1c:	86 95       	lsr	r24
    1e1e:	86 95       	lsr	r24
    1e20:	83 70       	andi	r24, 0x03	; 3
    1e22:	98 2f       	mov	r25, r24
    1e24:	91 70       	andi	r25, 0x01	; 1
    1e26:	86 e1       	ldi	r24, 0x16	; 22
    1e28:	69 2f       	mov	r22, r25
    1e2a:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D7_PIN,GET_BIT(copy_u8Byte,7));
    1e2e:	fe 01       	movw	r30, r28
    1e30:	ef 59       	subi	r30, 0x9F	; 159
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	98 2f       	mov	r25, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	99 27       	eor	r25, r25
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	88 e1       	ldi	r24, 0x18	; 24
    1e40:	69 2f       	mov	r22, r25
    1e42:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_HIGH);//LCD EN=1
    1e46:	8c e0       	ldi	r24, 0x0C	; 12
    1e48:	61 e0       	ldi	r22, 0x01	; 1
    1e4a:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e3 5a       	subi	r30, 0xA3	; 163
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e8       	ldi	r26, 0x80	; 128
    1e5a:	bf e3       	ldi	r27, 0x3F	; 63
    1e5c:	80 83       	st	Z, r24
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	a2 83       	std	Z+2, r26	; 0x02
    1e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e64:	8e 01       	movw	r16, r28
    1e66:	07 5a       	subi	r16, 0xA7	; 167
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e3 5a       	subi	r30, 0xA3	; 163
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	2b ea       	ldi	r18, 0xAB	; 171
    1e7a:	3a ea       	ldi	r19, 0xAA	; 170
    1e7c:	4a ea       	ldi	r20, 0xAA	; 170
    1e7e:	50 e4       	ldi	r21, 0x40	; 64
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	f8 01       	movw	r30, r16
    1e8a:	80 83       	st	Z, r24
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	a2 83       	std	Z+2, r26	; 0x02
    1e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e92:	fe 01       	movw	r30, r28
    1e94:	e7 5a       	subi	r30, 0xA7	; 167
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	34 f4       	brge	.+12     	; 0x1ebc <H_LCD_void_latchByte+0x106>
		__ticks = 1;
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e8 5a       	subi	r30, 0xA8	; 168
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	80 83       	st	Z, r24
    1eba:	e0 c0       	rjmp	.+448    	; 0x207c <H_LCD_void_latchByte+0x2c6>
	else if (__tmp > 255)
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e7 5a       	subi	r30, 0xA7	; 167
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	53 e4       	ldi	r21, 0x43	; 67
    1ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	0c f0       	brlt	.+2      	; 0x1edc <H_LCD_void_latchByte+0x126>
    1eda:	c0 c0       	rjmp	.+384    	; 0x205c <H_LCD_void_latchByte+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    1edc:	fe 01       	movw	r30, r28
    1ede:	e3 5a       	subi	r30, 0xA3	; 163
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a e7       	ldi	r20, 0x7A	; 122
    1ef0:	54 e4       	ldi	r21, 0x44	; 68
    1ef2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	fe 01       	movw	r30, r28
    1efc:	ec 5a       	subi	r30, 0xAC	; 172
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 83       	st	Z, r24
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	a2 83       	std	Z+2, r26	; 0x02
    1f06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	8e 01       	movw	r16, r28
    1f0a:	00 5b       	subi	r16, 0xB0	; 176
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ec 5a       	subi	r30, 0xAC	; 172
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	4a e7       	ldi	r20, 0x7A	; 122
    1f22:	55 e4       	ldi	r21, 0x45	; 69
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	80 83       	st	Z, r24
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	a2 83       	std	Z+2, r26	; 0x02
    1f34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f36:	fe 01       	movw	r30, r28
    1f38:	e0 5b       	subi	r30, 0xB0	; 176
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e8       	ldi	r20, 0x80	; 128
    1f4a:	5f e3       	ldi	r21, 0x3F	; 63
    1f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f50:	88 23       	and	r24, r24
    1f52:	44 f4       	brge	.+16     	; 0x1f64 <H_LCD_void_latchByte+0x1ae>
		__ticks = 1;
    1f54:	fe 01       	movw	r30, r28
    1f56:	e2 5b       	subi	r30, 0xB2	; 178
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	64 c0       	rjmp	.+200    	; 0x202c <H_LCD_void_latchByte+0x276>
	else if (__tmp > 65535)
    1f64:	fe 01       	movw	r30, r28
    1f66:	e0 5b       	subi	r30, 0xB0	; 176
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	57 e4       	ldi	r21, 0x47	; 71
    1f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	0c f0       	brlt	.+2      	; 0x1f84 <H_LCD_void_latchByte+0x1ce>
    1f82:	43 c0       	rjmp	.+134    	; 0x200a <H_LCD_void_latchByte+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	fe 01       	movw	r30, r28
    1f86:	ec 5a       	subi	r30, 0xAC	; 172
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e2       	ldi	r20, 0x20	; 32
    1f98:	51 e4       	ldi	r21, 0x41	; 65
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	8e 01       	movw	r16, r28
    1fa4:	02 5b       	subi	r16, 0xB2	; 178
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	f8 01       	movw	r30, r16
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	80 83       	st	Z, r24
    1fba:	1f c0       	rjmp	.+62     	; 0x1ffa <H_LCD_void_latchByte+0x244>
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e4 5b       	subi	r30, 0xB4	; 180
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 e9       	ldi	r24, 0x90	; 144
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e4 5b       	subi	r30, 0xB4	; 180
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <H_LCD_void_latchByte+0x21e>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e4 5b       	subi	r30, 0xB4	; 180
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	de 01       	movw	r26, r28
    1fe4:	a2 5b       	subi	r26, 0xB2	; 178
    1fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e2 5b       	subi	r30, 0xB2	; 178
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	11 96       	adiw	r26, 0x01	; 1
    1ff6:	9c 93       	st	X, r25
    1ff8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e2 5b       	subi	r30, 0xB2	; 178
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	d1 f6       	brne	.-76     	; 0x1fbc <H_LCD_void_latchByte+0x206>
    2008:	4b c0       	rjmp	.+150    	; 0x20a0 <H_LCD_void_latchByte+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	8e 01       	movw	r16, r28
    200c:	02 5b       	subi	r16, 0xB2	; 178
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	fe 01       	movw	r30, r28
    2012:	e0 5b       	subi	r30, 0xB0	; 176
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	f8 01       	movw	r30, r16
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	80 83       	st	Z, r24
    202c:	de 01       	movw	r26, r28
    202e:	a6 5b       	subi	r26, 0xB6	; 182
    2030:	bf 4f       	sbci	r27, 0xFF	; 255
    2032:	fe 01       	movw	r30, r28
    2034:	e2 5b       	subi	r30, 0xB2	; 178
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	11 96       	adiw	r26, 0x01	; 1
    203e:	9c 93       	st	X, r25
    2040:	8e 93       	st	-X, r24
    2042:	fe 01       	movw	r30, r28
    2044:	e6 5b       	subi	r30, 0xB6	; 182
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <H_LCD_void_latchByte+0x296>
    2050:	fe 01       	movw	r30, r28
    2052:	e6 5b       	subi	r30, 0xB6	; 182
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
    205a:	22 c0       	rjmp	.+68     	; 0x20a0 <H_LCD_void_latchByte+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    205c:	8e 01       	movw	r16, r28
    205e:	08 5a       	subi	r16, 0xA8	; 168
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	fe 01       	movw	r30, r28
    2064:	e7 5a       	subi	r30, 0xA7	; 167
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	f8 01       	movw	r30, r16
    207a:	80 83       	st	Z, r24
    207c:	de 01       	movw	r26, r28
    207e:	a7 5b       	subi	r26, 0xB7	; 183
    2080:	bf 4f       	sbci	r27, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	e8 5a       	subi	r30, 0xA8	; 168
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    208c:	fe 01       	movw	r30, r28
    208e:	e7 5b       	subi	r30, 0xB7	; 183
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	8a 95       	dec	r24
    2096:	f1 f7       	brne	.-4      	; 0x2094 <H_LCD_void_latchByte+0x2de>
    2098:	fe 01       	movw	r30, r28
    209a:	e7 5b       	subi	r30, 0xB7	; 183
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 83       	st	Z, r24
		_delay_us(1);
		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=1
    20a0:	8c e0       	ldi	r24, 0x0C	; 12
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
    20a8:	fe 01       	movw	r30, r28
    20aa:	eb 5b       	subi	r30, 0xBB	; 187
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a8 ec       	ldi	r26, 0xC8	; 200
    20b4:	b2 e4       	ldi	r27, 0x42	; 66
    20b6:	80 83       	st	Z, r24
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	a2 83       	std	Z+2, r26	; 0x02
    20bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20be:	8e 01       	movw	r16, r28
    20c0:	0f 5b       	subi	r16, 0xBF	; 191
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	fe 01       	movw	r30, r28
    20c6:	eb 5b       	subi	r30, 0xBB	; 187
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	60 81       	ld	r22, Z
    20cc:	71 81       	ldd	r23, Z+1	; 0x01
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	93 81       	ldd	r25, Z+3	; 0x03
    20d2:	2b ea       	ldi	r18, 0xAB	; 171
    20d4:	3a ea       	ldi	r19, 0xAA	; 170
    20d6:	4a ea       	ldi	r20, 0xAA	; 170
    20d8:	50 e4       	ldi	r21, 0x40	; 64
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	f8 01       	movw	r30, r16
    20e4:	80 83       	st	Z, r24
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	a2 83       	std	Z+2, r26	; 0x02
    20ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ec:	fe 01       	movw	r30, r28
    20ee:	ef 5b       	subi	r30, 0xBF	; 191
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	5f e3       	ldi	r21, 0x3F	; 63
    2102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2106:	88 23       	and	r24, r24
    2108:	34 f4       	brge	.+12     	; 0x2116 <H_LCD_void_latchByte+0x360>
		__ticks = 1;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	fe 01       	movw	r30, r28
    210e:	e0 5c       	subi	r30, 0xC0	; 192
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 83       	st	Z, r24
    2114:	9d c0       	rjmp	.+314    	; 0x2250 <H_LCD_void_latchByte+0x49a>
	else if (__tmp > 255)
    2116:	fe 01       	movw	r30, r28
    2118:	ef 5b       	subi	r30, 0xBF	; 191
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	53 e4       	ldi	r21, 0x43	; 67
    212c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	0c f0       	brlt	.+2      	; 0x2136 <H_LCD_void_latchByte+0x380>
    2134:	7e c0       	rjmp	.+252    	; 0x2232 <H_LCD_void_latchByte+0x47c>
	{
		_delay_ms(__us / 1000.0);
    2136:	fe 01       	movw	r30, r28
    2138:	eb 5b       	subi	r30, 0xBB	; 187
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a e7       	ldi	r20, 0x7A	; 122
    214a:	54 e4       	ldi	r21, 0x44	; 68
    214c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8c af       	std	Y+60, r24	; 0x3c
    2156:	9d af       	std	Y+61, r25	; 0x3d
    2158:	ae af       	std	Y+62, r26	; 0x3e
    215a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	6c ad       	ldd	r22, Y+60	; 0x3c
    215e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2160:	8e ad       	ldd	r24, Y+62	; 0x3e
    2162:	9f ad       	ldd	r25, Y+63	; 0x3f
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a e7       	ldi	r20, 0x7A	; 122
    216a:	55 e4       	ldi	r21, 0x45	; 69
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	88 af       	std	Y+56, r24	; 0x38
    2176:	99 af       	std	Y+57, r25	; 0x39
    2178:	aa af       	std	Y+58, r26	; 0x3a
    217a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    217c:	68 ad       	ldd	r22, Y+56	; 0x38
    217e:	79 ad       	ldd	r23, Y+57	; 0x39
    2180:	8a ad       	ldd	r24, Y+58	; 0x3a
    2182:	9b ad       	ldd	r25, Y+59	; 0x3b
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <H_LCD_void_latchByte+0x3e8>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9f ab       	std	Y+55, r25	; 0x37
    219a:	8e ab       	std	Y+54, r24	; 0x36
    219c:	3f c0       	rjmp	.+126    	; 0x221c <H_LCD_void_latchByte+0x466>
	else if (__tmp > 65535)
    219e:	68 ad       	ldd	r22, Y+56	; 0x38
    21a0:	79 ad       	ldd	r23, Y+57	; 0x39
    21a2:	8a ad       	ldd	r24, Y+58	; 0x3a
    21a4:	9b ad       	ldd	r25, Y+59	; 0x3b
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <H_LCD_void_latchByte+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    21b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    21ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    21bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9f ab       	std	Y+55, r25	; 0x37
    21dc:	8e ab       	std	Y+54, r24	; 0x36
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <H_LCD_void_latchByte+0x448>
    21e0:	80 e9       	ldi	r24, 0x90	; 144
    21e2:	91 e0       	ldi	r25, 0x01	; 1
    21e4:	9d ab       	std	Y+53, r25	; 0x35
    21e6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e8:	8c a9       	ldd	r24, Y+52	; 0x34
    21ea:	9d a9       	ldd	r25, Y+53	; 0x35
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <H_LCD_void_latchByte+0x436>
    21f0:	9d ab       	std	Y+53, r25	; 0x35
    21f2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8e a9       	ldd	r24, Y+54	; 0x36
    21f6:	9f a9       	ldd	r25, Y+55	; 0x37
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9f ab       	std	Y+55, r25	; 0x37
    21fc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8e a9       	ldd	r24, Y+54	; 0x36
    2200:	9f a9       	ldd	r25, Y+55	; 0x37
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <H_LCD_void_latchByte+0x42a>
    2206:	2d c0       	rjmp	.+90     	; 0x2262 <H_LCD_void_latchByte+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	68 ad       	ldd	r22, Y+56	; 0x38
    220a:	79 ad       	ldd	r23, Y+57	; 0x39
    220c:	8a ad       	ldd	r24, Y+58	; 0x3a
    220e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9f ab       	std	Y+55, r25	; 0x37
    221a:	8e ab       	std	Y+54, r24	; 0x36
    221c:	8e a9       	ldd	r24, Y+54	; 0x36
    221e:	9f a9       	ldd	r25, Y+55	; 0x37
    2220:	9b ab       	std	Y+51, r25	; 0x33
    2222:	8a ab       	std	Y+50, r24	; 0x32
    2224:	8a a9       	ldd	r24, Y+50	; 0x32
    2226:	9b a9       	ldd	r25, Y+51	; 0x33
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <H_LCD_void_latchByte+0x472>
    222c:	9b ab       	std	Y+51, r25	; 0x33
    222e:	8a ab       	std	Y+50, r24	; 0x32
    2230:	18 c0       	rjmp	.+48     	; 0x2262 <H_LCD_void_latchByte+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2232:	fe 01       	movw	r30, r28
    2234:	ef 5b       	subi	r30, 0xBF	; 191
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	fe 01       	movw	r30, r28
    224a:	e0 5c       	subi	r30, 0xC0	; 192
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 83       	st	Z, r24
    2250:	fe 01       	movw	r30, r28
    2252:	e0 5c       	subi	r30, 0xC0	; 192
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    225a:	89 a9       	ldd	r24, Y+49	; 0x31
    225c:	8a 95       	dec	r24
    225e:	f1 f7       	brne	.-4      	; 0x225c <H_LCD_void_latchByte+0x4a6>
    2260:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(100);
		/*
		 * LOW LEVEL PINS
		 */
		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=0
    2262:	8c e0       	ldi	r24, 0x0C	; 12
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D4_PIN,GET_BIT(copy_u8Byte,0));
    226a:	fe 01       	movw	r30, r28
    226c:	ef 59       	subi	r30, 0x9F	; 159
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	98 2f       	mov	r25, r24
    2274:	91 70       	andi	r25, 0x01	; 1
    2276:	84 e1       	ldi	r24, 0x14	; 20
    2278:	69 2f       	mov	r22, r25
    227a:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D5_PIN,GET_BIT(copy_u8Byte,1));
    227e:	fe 01       	movw	r30, r28
    2280:	ef 59       	subi	r30, 0x9F	; 159
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 81       	ld	r24, Z
    2286:	86 95       	lsr	r24
    2288:	98 2f       	mov	r25, r24
    228a:	91 70       	andi	r25, 0x01	; 1
    228c:	85 e1       	ldi	r24, 0x15	; 21
    228e:	69 2f       	mov	r22, r25
    2290:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D6_PIN,GET_BIT(copy_u8Byte,2));
    2294:	fe 01       	movw	r30, r28
    2296:	ef 59       	subi	r30, 0x9F	; 159
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	86 95       	lsr	r24
    229e:	86 95       	lsr	r24
    22a0:	98 2f       	mov	r25, r24
    22a2:	91 70       	andi	r25, 0x01	; 1
    22a4:	86 e1       	ldi	r24, 0x16	; 22
    22a6:	69 2f       	mov	r22, r25
    22a8:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D7_PIN,GET_BIT(copy_u8Byte,3));
    22ac:	fe 01       	movw	r30, r28
    22ae:	ef 59       	subi	r30, 0x9F	; 159
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	86 95       	lsr	r24
    22b6:	86 95       	lsr	r24
    22b8:	86 95       	lsr	r24
    22ba:	98 2f       	mov	r25, r24
    22bc:	91 70       	andi	r25, 0x01	; 1
    22be:	88 e1       	ldi	r24, 0x18	; 24
    22c0:	69 2f       	mov	r22, r25
    22c2:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_HIGH);//LCD EN=1
    22c6:	8c e0       	ldi	r24, 0x0C	; 12
    22c8:	61 e0       	ldi	r22, 0x01	; 1
    22ca:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 e8       	ldi	r26, 0x80	; 128
    22d4:	bf e3       	ldi	r27, 0x3F	; 63
    22d6:	8d a7       	std	Y+45, r24	; 0x2d
    22d8:	9e a7       	std	Y+46, r25	; 0x2e
    22da:	af a7       	std	Y+47, r26	; 0x2f
    22dc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22de:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e0:	7e a5       	ldd	r23, Y+46	; 0x2e
    22e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e4:	98 a9       	ldd	r25, Y+48	; 0x30
    22e6:	2b ea       	ldi	r18, 0xAB	; 171
    22e8:	3a ea       	ldi	r19, 0xAA	; 170
    22ea:	4a ea       	ldi	r20, 0xAA	; 170
    22ec:	50 e4       	ldi	r21, 0x40	; 64
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	89 a7       	std	Y+41, r24	; 0x29
    22f8:	9a a7       	std	Y+42, r25	; 0x2a
    22fa:	ab a7       	std	Y+43, r26	; 0x2b
    22fc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22fe:	69 a5       	ldd	r22, Y+41	; 0x29
    2300:	7a a5       	ldd	r23, Y+42	; 0x2a
    2302:	8b a5       	ldd	r24, Y+43	; 0x2b
    2304:	9c a5       	ldd	r25, Y+44	; 0x2c
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	1c f4       	brge	.+6      	; 0x231c <H_LCD_void_latchByte+0x566>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	88 a7       	std	Y+40, r24	; 0x28
    231a:	91 c0       	rjmp	.+290    	; 0x243e <H_LCD_void_latchByte+0x688>
	else if (__tmp > 255)
    231c:	69 a5       	ldd	r22, Y+41	; 0x29
    231e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2320:	8b a5       	ldd	r24, Y+43	; 0x2b
    2322:	9c a5       	ldd	r25, Y+44	; 0x2c
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	53 e4       	ldi	r21, 0x43	; 67
    232c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	0c f0       	brlt	.+2      	; 0x2336 <H_LCD_void_latchByte+0x580>
    2334:	7b c0       	rjmp	.+246    	; 0x242c <H_LCD_void_latchByte+0x676>
	{
		_delay_ms(__us / 1000.0);
    2336:	6d a5       	ldd	r22, Y+45	; 0x2d
    2338:	7e a5       	ldd	r23, Y+46	; 0x2e
    233a:	8f a5       	ldd	r24, Y+47	; 0x2f
    233c:	98 a9       	ldd	r25, Y+48	; 0x30
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4a e7       	ldi	r20, 0x7A	; 122
    2344:	54 e4       	ldi	r21, 0x44	; 68
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	8c a3       	std	Y+36, r24	; 0x24
    2350:	9d a3       	std	Y+37, r25	; 0x25
    2352:	ae a3       	std	Y+38, r26	; 0x26
    2354:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	6c a1       	ldd	r22, Y+36	; 0x24
    2358:	7d a1       	ldd	r23, Y+37	; 0x25
    235a:	8e a1       	ldd	r24, Y+38	; 0x26
    235c:	9f a1       	ldd	r25, Y+39	; 0x27
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a e7       	ldi	r20, 0x7A	; 122
    2364:	55 e4       	ldi	r21, 0x45	; 69
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	88 a3       	std	Y+32, r24	; 0x20
    2370:	99 a3       	std	Y+33, r25	; 0x21
    2372:	aa a3       	std	Y+34, r26	; 0x22
    2374:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2376:	68 a1       	ldd	r22, Y+32	; 0x20
    2378:	79 a1       	ldd	r23, Y+33	; 0x21
    237a:	8a a1       	ldd	r24, Y+34	; 0x22
    237c:	9b a1       	ldd	r25, Y+35	; 0x23
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <H_LCD_void_latchByte+0x5e2>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9f 8f       	std	Y+31, r25	; 0x1f
    2394:	8e 8f       	std	Y+30, r24	; 0x1e
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <H_LCD_void_latchByte+0x660>
	else if (__tmp > 65535)
    2398:	68 a1       	ldd	r22, Y+32	; 0x20
    239a:	79 a1       	ldd	r23, Y+33	; 0x21
    239c:	8a a1       	ldd	r24, Y+34	; 0x22
    239e:	9b a1       	ldd	r25, Y+35	; 0x23
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <H_LCD_void_latchByte+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	6c a1       	ldd	r22, Y+36	; 0x24
    23b2:	7d a1       	ldd	r23, Y+37	; 0x25
    23b4:	8e a1       	ldd	r24, Y+38	; 0x26
    23b6:	9f a1       	ldd	r25, Y+39	; 0x27
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9f 8f       	std	Y+31, r25	; 0x1f
    23d6:	8e 8f       	std	Y+30, r24	; 0x1e
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <H_LCD_void_latchByte+0x642>
    23da:	80 e9       	ldi	r24, 0x90	; 144
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	9d 8f       	std	Y+29, r25	; 0x1d
    23e0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <H_LCD_void_latchByte+0x630>
    23ea:	9d 8f       	std	Y+29, r25	; 0x1d
    23ec:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	9f 8f       	std	Y+31, r25	; 0x1f
    23f6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <H_LCD_void_latchByte+0x624>
    2400:	24 c0       	rjmp	.+72     	; 0x244a <H_LCD_void_latchByte+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	68 a1       	ldd	r22, Y+32	; 0x20
    2404:	79 a1       	ldd	r23, Y+33	; 0x21
    2406:	8a a1       	ldd	r24, Y+34	; 0x22
    2408:	9b a1       	ldd	r25, Y+35	; 0x23
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9f 8f       	std	Y+31, r25	; 0x1f
    2414:	8e 8f       	std	Y+30, r24	; 0x1e
    2416:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2418:	9f 8d       	ldd	r25, Y+31	; 0x1f
    241a:	9b 8f       	std	Y+27, r25	; 0x1b
    241c:	8a 8f       	std	Y+26, r24	; 0x1a
    241e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2420:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <H_LCD_void_latchByte+0x66c>
    2426:	9b 8f       	std	Y+27, r25	; 0x1b
    2428:	8a 8f       	std	Y+26, r24	; 0x1a
    242a:	0f c0       	rjmp	.+30     	; 0x244a <H_LCD_void_latchByte+0x694>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    242c:	69 a5       	ldd	r22, Y+41	; 0x29
    242e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2430:	8b a5       	ldd	r24, Y+43	; 0x2b
    2432:	9c a5       	ldd	r25, Y+44	; 0x2c
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	88 a7       	std	Y+40, r24	; 0x28
    243e:	88 a5       	ldd	r24, Y+40	; 0x28
    2440:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2442:	89 8d       	ldd	r24, Y+25	; 0x19
    2444:	8a 95       	dec	r24
    2446:	f1 f7       	brne	.-4      	; 0x2444 <H_LCD_void_latchByte+0x68e>
    2448:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=1
    244a:	8c e0       	ldi	r24, 0x0C	; 12
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a8 ec       	ldi	r26, 0xC8	; 200
    2458:	b2 e4       	ldi	r27, 0x42	; 66
    245a:	8d 8b       	std	Y+21, r24	; 0x15
    245c:	9e 8b       	std	Y+22, r25	; 0x16
    245e:	af 8b       	std	Y+23, r26	; 0x17
    2460:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2462:	6d 89       	ldd	r22, Y+21	; 0x15
    2464:	7e 89       	ldd	r23, Y+22	; 0x16
    2466:	8f 89       	ldd	r24, Y+23	; 0x17
    2468:	98 8d       	ldd	r25, Y+24	; 0x18
    246a:	2b ea       	ldi	r18, 0xAB	; 171
    246c:	3a ea       	ldi	r19, 0xAA	; 170
    246e:	4a ea       	ldi	r20, 0xAA	; 170
    2470:	50 e4       	ldi	r21, 0x40	; 64
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	89 8b       	std	Y+17, r24	; 0x11
    247c:	9a 8b       	std	Y+18, r25	; 0x12
    247e:	ab 8b       	std	Y+19, r26	; 0x13
    2480:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2482:	69 89       	ldd	r22, Y+17	; 0x11
    2484:	7a 89       	ldd	r23, Y+18	; 0x12
    2486:	8b 89       	ldd	r24, Y+19	; 0x13
    2488:	9c 89       	ldd	r25, Y+20	; 0x14
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	1c f4       	brge	.+6      	; 0x24a0 <H_LCD_void_latchByte+0x6ea>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	88 8b       	std	Y+16, r24	; 0x10
    249e:	91 c0       	rjmp	.+290    	; 0x25c2 <H_LCD_void_latchByte+0x80c>
	else if (__tmp > 255)
    24a0:	69 89       	ldd	r22, Y+17	; 0x11
    24a2:	7a 89       	ldd	r23, Y+18	; 0x12
    24a4:	8b 89       	ldd	r24, Y+19	; 0x13
    24a6:	9c 89       	ldd	r25, Y+20	; 0x14
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	53 e4       	ldi	r21, 0x43	; 67
    24b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	0c f0       	brlt	.+2      	; 0x24ba <H_LCD_void_latchByte+0x704>
    24b8:	7b c0       	rjmp	.+246    	; 0x25b0 <H_LCD_void_latchByte+0x7fa>
	{
		_delay_ms(__us / 1000.0);
    24ba:	6d 89       	ldd	r22, Y+21	; 0x15
    24bc:	7e 89       	ldd	r23, Y+22	; 0x16
    24be:	8f 89       	ldd	r24, Y+23	; 0x17
    24c0:	98 8d       	ldd	r25, Y+24	; 0x18
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a e7       	ldi	r20, 0x7A	; 122
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8c 87       	std	Y+12, r24	; 0x0c
    24d4:	9d 87       	std	Y+13, r25	; 0x0d
    24d6:	ae 87       	std	Y+14, r26	; 0x0e
    24d8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24da:	6c 85       	ldd	r22, Y+12	; 0x0c
    24dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    24de:	8e 85       	ldd	r24, Y+14	; 0x0e
    24e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a e7       	ldi	r20, 0x7A	; 122
    24e8:	55 e4       	ldi	r21, 0x45	; 69
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	88 87       	std	Y+8, r24	; 0x08
    24f4:	99 87       	std	Y+9, r25	; 0x09
    24f6:	aa 87       	std	Y+10, r26	; 0x0a
    24f8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24fa:	68 85       	ldd	r22, Y+8	; 0x08
    24fc:	79 85       	ldd	r23, Y+9	; 0x09
    24fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2500:	9b 85       	ldd	r25, Y+11	; 0x0b
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e8       	ldi	r20, 0x80	; 128
    2508:	5f e3       	ldi	r21, 0x3F	; 63
    250a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250e:	88 23       	and	r24, r24
    2510:	2c f4       	brge	.+10     	; 0x251c <H_LCD_void_latchByte+0x766>
		__ticks = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9f 83       	std	Y+7, r25	; 0x07
    2518:	8e 83       	std	Y+6, r24	; 0x06
    251a:	3f c0       	rjmp	.+126    	; 0x259a <H_LCD_void_latchByte+0x7e4>
	else if (__tmp > 65535)
    251c:	68 85       	ldd	r22, Y+8	; 0x08
    251e:	79 85       	ldd	r23, Y+9	; 0x09
    2520:	8a 85       	ldd	r24, Y+10	; 0x0a
    2522:	9b 85       	ldd	r25, Y+11	; 0x0b
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f e7       	ldi	r20, 0x7F	; 127
    252a:	57 e4       	ldi	r21, 0x47	; 71
    252c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2530:	18 16       	cp	r1, r24
    2532:	4c f5       	brge	.+82     	; 0x2586 <H_LCD_void_latchByte+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	6c 85       	ldd	r22, Y+12	; 0x0c
    2536:	7d 85       	ldd	r23, Y+13	; 0x0d
    2538:	8e 85       	ldd	r24, Y+14	; 0x0e
    253a:	9f 85       	ldd	r25, Y+15	; 0x0f
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e2       	ldi	r20, 0x20	; 32
    2542:	51 e4       	ldi	r21, 0x41	; 65
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9f 83       	std	Y+7, r25	; 0x07
    255a:	8e 83       	std	Y+6, r24	; 0x06
    255c:	0f c0       	rjmp	.+30     	; 0x257c <H_LCD_void_latchByte+0x7c6>
    255e:	80 e9       	ldi	r24, 0x90	; 144
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	9d 83       	std	Y+5, r25	; 0x05
    2564:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2566:	8c 81       	ldd	r24, Y+4	; 0x04
    2568:	9d 81       	ldd	r25, Y+5	; 0x05
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <H_LCD_void_latchByte+0x7b4>
    256e:	9d 83       	std	Y+5, r25	; 0x05
    2570:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	8e 81       	ldd	r24, Y+6	; 0x06
    2574:	9f 81       	ldd	r25, Y+7	; 0x07
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	9f 83       	std	Y+7, r25	; 0x07
    257a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	8e 81       	ldd	r24, Y+6	; 0x06
    257e:	9f 81       	ldd	r25, Y+7	; 0x07
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	69 f7       	brne	.-38     	; 0x255e <H_LCD_void_latchByte+0x7a8>
    2584:	24 c0       	rjmp	.+72     	; 0x25ce <H_LCD_void_latchByte+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2586:	68 85       	ldd	r22, Y+8	; 0x08
    2588:	79 85       	ldd	r23, Y+9	; 0x09
    258a:	8a 85       	ldd	r24, Y+10	; 0x0a
    258c:	9b 85       	ldd	r25, Y+11	; 0x0b
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9f 83       	std	Y+7, r25	; 0x07
    2598:	8e 83       	std	Y+6, r24	; 0x06
    259a:	8e 81       	ldd	r24, Y+6	; 0x06
    259c:	9f 81       	ldd	r25, Y+7	; 0x07
    259e:	9b 83       	std	Y+3, r25	; 0x03
    25a0:	8a 83       	std	Y+2, r24	; 0x02
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <H_LCD_void_latchByte+0x7f0>
    25aa:	9b 83       	std	Y+3, r25	; 0x03
    25ac:	8a 83       	std	Y+2, r24	; 0x02
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <H_LCD_void_latchByte+0x818>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25b0:	69 89       	ldd	r22, Y+17	; 0x11
    25b2:	7a 89       	ldd	r23, Y+18	; 0x12
    25b4:	8b 89       	ldd	r24, Y+19	; 0x13
    25b6:	9c 89       	ldd	r25, Y+20	; 0x14
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	88 8b       	std	Y+16, r24	; 0x10
    25c2:	88 89       	ldd	r24, Y+16	; 0x10
    25c4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	8a 95       	dec	r24
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <H_LCD_void_latchByte+0x812>
    25cc:	89 83       	std	Y+1, r24	; 0x01

	}
#elif(LCD_MODE == _8_BIT_MODE)

#endif
}
    25ce:	cf 59       	subi	r28, 0x9F	; 159
    25d0:	df 4f       	sbci	r29, 0xFF	; 255
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <H_LCD_void_Init>:


void H_LCD_void_Init(void)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	e0 97       	sbiw	r28, 0x30	; 48
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
	M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=0
    25fa:	8c e0       	ldi	r24, 0x0C	; 12
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	aa ef       	ldi	r26, 0xFA	; 250
    2608:	b4 e4       	ldi	r27, 0x44	; 68
    260a:	8d a7       	std	Y+45, r24	; 0x2d
    260c:	9e a7       	std	Y+46, r25	; 0x2e
    260e:	af a7       	std	Y+47, r26	; 0x2f
    2610:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2612:	6d a5       	ldd	r22, Y+45	; 0x2d
    2614:	7e a5       	ldd	r23, Y+46	; 0x2e
    2616:	8f a5       	ldd	r24, Y+47	; 0x2f
    2618:	98 a9       	ldd	r25, Y+48	; 0x30
    261a:	2b ea       	ldi	r18, 0xAB	; 171
    261c:	3a ea       	ldi	r19, 0xAA	; 170
    261e:	4a ea       	ldi	r20, 0xAA	; 170
    2620:	50 e4       	ldi	r21, 0x40	; 64
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	89 a7       	std	Y+41, r24	; 0x29
    262c:	9a a7       	std	Y+42, r25	; 0x2a
    262e:	ab a7       	std	Y+43, r26	; 0x2b
    2630:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2632:	69 a5       	ldd	r22, Y+41	; 0x29
    2634:	7a a5       	ldd	r23, Y+42	; 0x2a
    2636:	8b a5       	ldd	r24, Y+43	; 0x2b
    2638:	9c a5       	ldd	r25, Y+44	; 0x2c
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	1c f4       	brge	.+6      	; 0x2650 <H_LCD_void_Init+0x6a>
		__ticks = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	88 a7       	std	Y+40, r24	; 0x28
    264e:	91 c0       	rjmp	.+290    	; 0x2772 <H_LCD_void_Init+0x18c>
	else if (__tmp > 255)
    2650:	69 a5       	ldd	r22, Y+41	; 0x29
    2652:	7a a5       	ldd	r23, Y+42	; 0x2a
    2654:	8b a5       	ldd	r24, Y+43	; 0x2b
    2656:	9c a5       	ldd	r25, Y+44	; 0x2c
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	53 e4       	ldi	r21, 0x43	; 67
    2660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	0c f0       	brlt	.+2      	; 0x266a <H_LCD_void_Init+0x84>
    2668:	7b c0       	rjmp	.+246    	; 0x2760 <H_LCD_void_Init+0x17a>
	{
		_delay_ms(__us / 1000.0);
    266a:	6d a5       	ldd	r22, Y+45	; 0x2d
    266c:	7e a5       	ldd	r23, Y+46	; 0x2e
    266e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2670:	98 a9       	ldd	r25, Y+48	; 0x30
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4a e7       	ldi	r20, 0x7A	; 122
    2678:	54 e4       	ldi	r21, 0x44	; 68
    267a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	8c a3       	std	Y+36, r24	; 0x24
    2684:	9d a3       	std	Y+37, r25	; 0x25
    2686:	ae a3       	std	Y+38, r26	; 0x26
    2688:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	6c a1       	ldd	r22, Y+36	; 0x24
    268c:	7d a1       	ldd	r23, Y+37	; 0x25
    268e:	8e a1       	ldd	r24, Y+38	; 0x26
    2690:	9f a1       	ldd	r25, Y+39	; 0x27
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	4a e7       	ldi	r20, 0x7A	; 122
    2698:	55 e4       	ldi	r21, 0x45	; 69
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	88 a3       	std	Y+32, r24	; 0x20
    26a4:	99 a3       	std	Y+33, r25	; 0x21
    26a6:	aa a3       	std	Y+34, r26	; 0x22
    26a8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    26aa:	68 a1       	ldd	r22, Y+32	; 0x20
    26ac:	79 a1       	ldd	r23, Y+33	; 0x21
    26ae:	8a a1       	ldd	r24, Y+34	; 0x22
    26b0:	9b a1       	ldd	r25, Y+35	; 0x23
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26be:	88 23       	and	r24, r24
    26c0:	2c f4       	brge	.+10     	; 0x26cc <H_LCD_void_Init+0xe6>
		__ticks = 1;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9f 8f       	std	Y+31, r25	; 0x1f
    26c8:	8e 8f       	std	Y+30, r24	; 0x1e
    26ca:	3f c0       	rjmp	.+126    	; 0x274a <H_LCD_void_Init+0x164>
	else if (__tmp > 65535)
    26cc:	68 a1       	ldd	r22, Y+32	; 0x20
    26ce:	79 a1       	ldd	r23, Y+33	; 0x21
    26d0:	8a a1       	ldd	r24, Y+34	; 0x22
    26d2:	9b a1       	ldd	r25, Y+35	; 0x23
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	4f e7       	ldi	r20, 0x7F	; 127
    26da:	57 e4       	ldi	r21, 0x47	; 71
    26dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e0:	18 16       	cp	r1, r24
    26e2:	4c f5       	brge	.+82     	; 0x2736 <H_LCD_void_Init+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e4:	6c a1       	ldd	r22, Y+36	; 0x24
    26e6:	7d a1       	ldd	r23, Y+37	; 0x25
    26e8:	8e a1       	ldd	r24, Y+38	; 0x26
    26ea:	9f a1       	ldd	r25, Y+39	; 0x27
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9f 8f       	std	Y+31, r25	; 0x1f
    270a:	8e 8f       	std	Y+30, r24	; 0x1e
    270c:	0f c0       	rjmp	.+30     	; 0x272c <H_LCD_void_Init+0x146>
    270e:	80 e9       	ldi	r24, 0x90	; 144
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	9d 8f       	std	Y+29, r25	; 0x1d
    2714:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2716:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2718:	9d 8d       	ldd	r25, Y+29	; 0x1d
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <H_LCD_void_Init+0x134>
    271e:	9d 8f       	std	Y+29, r25	; 0x1d
    2720:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2724:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9f 8f       	std	Y+31, r25	; 0x1f
    272a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    272e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	69 f7       	brne	.-38     	; 0x270e <H_LCD_void_Init+0x128>
    2734:	24 c0       	rjmp	.+72     	; 0x277e <H_LCD_void_Init+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	68 a1       	ldd	r22, Y+32	; 0x20
    2738:	79 a1       	ldd	r23, Y+33	; 0x21
    273a:	8a a1       	ldd	r24, Y+34	; 0x22
    273c:	9b a1       	ldd	r25, Y+35	; 0x23
    273e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9f 8f       	std	Y+31, r25	; 0x1f
    2748:	8e 8f       	std	Y+30, r24	; 0x1e
    274a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    274c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    274e:	9b 8f       	std	Y+27, r25	; 0x1b
    2750:	8a 8f       	std	Y+26, r24	; 0x1a
    2752:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2754:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <H_LCD_void_Init+0x170>
    275a:	9b 8f       	std	Y+27, r25	; 0x1b
    275c:	8a 8f       	std	Y+26, r24	; 0x1a
    275e:	0f c0       	rjmp	.+30     	; 0x277e <H_LCD_void_Init+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2760:	69 a5       	ldd	r22, Y+41	; 0x29
    2762:	7a a5       	ldd	r23, Y+42	; 0x2a
    2764:	8b a5       	ldd	r24, Y+43	; 0x2b
    2766:	9c a5       	ldd	r25, Y+44	; 0x2c
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	88 a7       	std	Y+40, r24	; 0x28
    2772:	88 a5       	ldd	r24, Y+40	; 0x28
    2774:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2776:	89 8d       	ldd	r24, Y+25	; 0x19
    2778:	8a 95       	dec	r24
    277a:	f1 f7       	brne	.-4      	; 0x2778 <H_LCD_void_Init+0x192>
    277c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2000);

	H_LCD_void_sendCommand(0x33);
    277e:	83 e3       	ldi	r24, 0x33	; 51
    2780:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(FUNCTION_SET);
    2784:	82 e3       	ldi	r24, 0x32	; 50
    2786:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(DISPLAY_SETUP);
    278a:	88 e2       	ldi	r24, 0x28	; 40
    278c:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(DISPLAY_ON);
    2790:	8e e0       	ldi	r24, 0x0E	; 14
    2792:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(CLEAR_DISPLAY);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	aa ef       	ldi	r26, 0xFA	; 250
    27a2:	b4 e4       	ldi	r27, 0x44	; 68
    27a4:	8d 8b       	std	Y+21, r24	; 0x15
    27a6:	9e 8b       	std	Y+22, r25	; 0x16
    27a8:	af 8b       	std	Y+23, r26	; 0x17
    27aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27ac:	6d 89       	ldd	r22, Y+21	; 0x15
    27ae:	7e 89       	ldd	r23, Y+22	; 0x16
    27b0:	8f 89       	ldd	r24, Y+23	; 0x17
    27b2:	98 8d       	ldd	r25, Y+24	; 0x18
    27b4:	2b ea       	ldi	r18, 0xAB	; 171
    27b6:	3a ea       	ldi	r19, 0xAA	; 170
    27b8:	4a ea       	ldi	r20, 0xAA	; 170
    27ba:	50 e4       	ldi	r21, 0x40	; 64
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	89 8b       	std	Y+17, r24	; 0x11
    27c6:	9a 8b       	std	Y+18, r25	; 0x12
    27c8:	ab 8b       	std	Y+19, r26	; 0x13
    27ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27cc:	69 89       	ldd	r22, Y+17	; 0x11
    27ce:	7a 89       	ldd	r23, Y+18	; 0x12
    27d0:	8b 89       	ldd	r24, Y+19	; 0x13
    27d2:	9c 89       	ldd	r25, Y+20	; 0x14
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e8       	ldi	r20, 0x80	; 128
    27da:	5f e3       	ldi	r21, 0x3F	; 63
    27dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e0:	88 23       	and	r24, r24
    27e2:	1c f4       	brge	.+6      	; 0x27ea <H_LCD_void_Init+0x204>
		__ticks = 1;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	88 8b       	std	Y+16, r24	; 0x10
    27e8:	91 c0       	rjmp	.+290    	; 0x290c <H_LCD_void_Init+0x326>
	else if (__tmp > 255)
    27ea:	69 89       	ldd	r22, Y+17	; 0x11
    27ec:	7a 89       	ldd	r23, Y+18	; 0x12
    27ee:	8b 89       	ldd	r24, Y+19	; 0x13
    27f0:	9c 89       	ldd	r25, Y+20	; 0x14
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4f e7       	ldi	r20, 0x7F	; 127
    27f8:	53 e4       	ldi	r21, 0x43	; 67
    27fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	0c f0       	brlt	.+2      	; 0x2804 <H_LCD_void_Init+0x21e>
    2802:	7b c0       	rjmp	.+246    	; 0x28fa <H_LCD_void_Init+0x314>
	{
		_delay_ms(__us / 1000.0);
    2804:	6d 89       	ldd	r22, Y+21	; 0x15
    2806:	7e 89       	ldd	r23, Y+22	; 0x16
    2808:	8f 89       	ldd	r24, Y+23	; 0x17
    280a:	98 8d       	ldd	r25, Y+24	; 0x18
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a e7       	ldi	r20, 0x7A	; 122
    2812:	54 e4       	ldi	r21, 0x44	; 68
    2814:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8c 87       	std	Y+12, r24	; 0x0c
    281e:	9d 87       	std	Y+13, r25	; 0x0d
    2820:	ae 87       	std	Y+14, r26	; 0x0e
    2822:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	6c 85       	ldd	r22, Y+12	; 0x0c
    2826:	7d 85       	ldd	r23, Y+13	; 0x0d
    2828:	8e 85       	ldd	r24, Y+14	; 0x0e
    282a:	9f 85       	ldd	r25, Y+15	; 0x0f
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a e7       	ldi	r20, 0x7A	; 122
    2832:	55 e4       	ldi	r21, 0x45	; 69
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	88 87       	std	Y+8, r24	; 0x08
    283e:	99 87       	std	Y+9, r25	; 0x09
    2840:	aa 87       	std	Y+10, r26	; 0x0a
    2842:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2844:	68 85       	ldd	r22, Y+8	; 0x08
    2846:	79 85       	ldd	r23, Y+9	; 0x09
    2848:	8a 85       	ldd	r24, Y+10	; 0x0a
    284a:	9b 85       	ldd	r25, Y+11	; 0x0b
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <H_LCD_void_Init+0x280>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9f 83       	std	Y+7, r25	; 0x07
    2862:	8e 83       	std	Y+6, r24	; 0x06
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <H_LCD_void_Init+0x2fe>
	else if (__tmp > 65535)
    2866:	68 85       	ldd	r22, Y+8	; 0x08
    2868:	79 85       	ldd	r23, Y+9	; 0x09
    286a:	8a 85       	ldd	r24, Y+10	; 0x0a
    286c:	9b 85       	ldd	r25, Y+11	; 0x0b
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <H_LCD_void_Init+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2880:	7d 85       	ldd	r23, Y+13	; 0x0d
    2882:	8e 85       	ldd	r24, Y+14	; 0x0e
    2884:	9f 85       	ldd	r25, Y+15	; 0x0f
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9f 83       	std	Y+7, r25	; 0x07
    28a4:	8e 83       	std	Y+6, r24	; 0x06
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <H_LCD_void_Init+0x2e0>
    28a8:	80 e9       	ldi	r24, 0x90	; 144
    28aa:	91 e0       	ldi	r25, 0x01	; 1
    28ac:	9d 83       	std	Y+5, r25	; 0x05
    28ae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	9d 81       	ldd	r25, Y+5	; 0x05
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <H_LCD_void_Init+0x2ce>
    28b8:	9d 83       	std	Y+5, r25	; 0x05
    28ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8e 81       	ldd	r24, Y+6	; 0x06
    28be:	9f 81       	ldd	r25, Y+7	; 0x07
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9f 83       	std	Y+7, r25	; 0x07
    28c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8e 81       	ldd	r24, Y+6	; 0x06
    28c8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <H_LCD_void_Init+0x2c2>
    28ce:	24 c0       	rjmp	.+72     	; 0x2918 <H_LCD_void_Init+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	68 85       	ldd	r22, Y+8	; 0x08
    28d2:	79 85       	ldd	r23, Y+9	; 0x09
    28d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9f 83       	std	Y+7, r25	; 0x07
    28e2:	8e 83       	std	Y+6, r24	; 0x06
    28e4:	8e 81       	ldd	r24, Y+6	; 0x06
    28e6:	9f 81       	ldd	r25, Y+7	; 0x07
    28e8:	9b 83       	std	Y+3, r25	; 0x03
    28ea:	8a 83       	std	Y+2, r24	; 0x02
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	9b 81       	ldd	r25, Y+3	; 0x03
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <H_LCD_void_Init+0x30a>
    28f4:	9b 83       	std	Y+3, r25	; 0x03
    28f6:	8a 83       	std	Y+2, r24	; 0x02
    28f8:	0f c0       	rjmp	.+30     	; 0x2918 <H_LCD_void_Init+0x332>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28fa:	69 89       	ldd	r22, Y+17	; 0x11
    28fc:	7a 89       	ldd	r23, Y+18	; 0x12
    28fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2900:	9c 89       	ldd	r25, Y+20	; 0x14
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	88 8b       	std	Y+16, r24	; 0x10
    290c:	88 89       	ldd	r24, Y+16	; 0x10
    290e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	8a 95       	dec	r24
    2914:	f1 f7       	brne	.-4      	; 0x2912 <H_LCD_void_Init+0x32c>
    2916:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);

	H_LCD_void_sendCommand(CURSOR_RIGHT);
    2918:	86 e0       	ldi	r24, 0x06	; 6
    291a:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>

}
    291e:	e0 96       	adiw	r28, 0x30	; 48
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <H_LCD_void_sendData>:

void H_LCD_void_sendData(u8 copy_u8data )
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	0f 92       	push	r0
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	89 83       	std	Y+1, r24	; 0x01
	//SET RS PIN
	M_Dio_void_setPinValue(LCD_RS_PIN,DIO_HIGH);
    293c:	8d e0       	ldi	r24, 0x0D	; 13
    293e:	61 e0       	ldi	r22, 0x01	; 1
    2940:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
	H_LCD_void_latchByte(copy_u8data);
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <H_LCD_void_latchByte>

}
    294a:	0f 90       	pop	r0
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command)
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	0f 92       	push	r0
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	89 83       	std	Y+1, r24	; 0x01
	//CLEAR RS PIN
	M_Dio_void_setPinValue(LCD_RS_PIN,DIO_LOW);
    295e:	8d e0       	ldi	r24, 0x0D	; 13
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
	H_LCD_void_latchByte(copy_u8command);
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <H_LCD_void_latchByte>
}
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <H_LCD_void_sendString>:

void H_LCD_void_sendString(const u8 * pstr)
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	00 d0       	rcall	.+0      	; 0x297a <H_LCD_void_sendString+0x6>
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	0a c0       	rjmp	.+20     	; 0x2998 <H_LCD_void_sendString+0x24>

	while(*pstr!='\0')
	{
		H_LCD_void_sendData(*pstr);
    2984:	e9 81       	ldd	r30, Y+1	; 0x01
    2986:	fa 81       	ldd	r31, Y+2	; 0x02
    2988:	80 81       	ld	r24, Z
    298a:	0e 94 98 14 	call	0x2930	; 0x2930 <H_LCD_void_sendData>
		pstr++;
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	9a 83       	std	Y+2, r25	; 0x02
    2996:	89 83       	std	Y+1, r24	; 0x01
}

void H_LCD_void_sendString(const u8 * pstr)
{

	while(*pstr!='\0')
    2998:	e9 81       	ldd	r30, Y+1	; 0x01
    299a:	fa 81       	ldd	r31, Y+2	; 0x02
    299c:	80 81       	ld	r24, Z
    299e:	88 23       	and	r24, r24
    29a0:	89 f7       	brne	.-30     	; 0x2984 <H_LCD_void_sendString+0x10>
	{
		H_LCD_void_sendData(*pstr);
		pstr++;
	}
}
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	28 97       	sbiw	r28, 0x08	; 8
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	6d 83       	std	Y+5, r22	; 0x05
    29ca:	7e 83       	std	Y+6, r23	; 0x06
    29cc:	8f 83       	std	Y+7, r24	; 0x07
    29ce:	98 87       	std	Y+8, r25	; 0x08

	u32 LOC_u16Reversed = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	a0 e0       	ldi	r26, 0x00	; 0
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	ab 83       	std	Y+3, r26	; 0x03
    29de:	bc 83       	std	Y+4, r27	; 0x04
	if (copy_s32Num == 0) {
    29e0:	8d 81       	ldd	r24, Y+5	; 0x05
    29e2:	9e 81       	ldd	r25, Y+6	; 0x06
    29e4:	af 81       	ldd	r26, Y+7	; 0x07
    29e6:	b8 85       	ldd	r27, Y+8	; 0x08
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	a1 05       	cpc	r26, r1
    29ec:	b1 05       	cpc	r27, r1
    29ee:	d1 f5       	brne	.+116    	; 0x2a64 <H_LCD_void_sendIntNum+0xb8>
		H_LCD_void_sendData('0');
    29f0:	80 e3       	ldi	r24, 0x30	; 48
    29f2:	0e 94 98 14 	call	0x2930	; 0x2930 <H_LCD_void_sendData>
    29f6:	6b c0       	rjmp	.+214    	; 0x2ace <H_LCD_void_sendIntNum+0x122>
	} else {
		while (copy_s32Num != 0) {
			LOC_u16Reversed = (LOC_u16Reversed * 10) + (copy_s32Num % 10);
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	ab 81       	ldd	r26, Y+3	; 0x03
    29fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2a00:	2a e0       	ldi	r18, 0x0A	; 10
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	50 e0       	ldi	r21, 0x00	; 0
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__mulsi3>
    2a10:	7b 01       	movw	r14, r22
    2a12:	8c 01       	movw	r16, r24
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	af 81       	ldd	r26, Y+7	; 0x07
    2a1a:	b8 85       	ldd	r27, Y+8	; 0x08
    2a1c:	2a e0       	ldi	r18, 0x0A	; 10
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	50 e0       	ldi	r21, 0x00	; 0
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__divmodsi4>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	8e 0d       	add	r24, r14
    2a32:	9f 1d       	adc	r25, r15
    2a34:	a0 1f       	adc	r26, r16
    2a36:	b1 1f       	adc	r27, r17
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	ab 83       	std	Y+3, r26	; 0x03
    2a3e:	bc 83       	std	Y+4, r27	; 0x04
			copy_s32Num /= 10;
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	af 81       	ldd	r26, Y+7	; 0x07
    2a46:	b8 85       	ldd	r27, Y+8	; 0x08
    2a48:	2a e0       	ldi	r18, 0x0A	; 10
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__divmodsi4>
    2a58:	da 01       	movw	r26, r20
    2a5a:	c9 01       	movw	r24, r18
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
    2a5e:	9e 83       	std	Y+6, r25	; 0x06
    2a60:	af 83       	std	Y+7, r26	; 0x07
    2a62:	b8 87       	std	Y+8, r27	; 0x08

	u32 LOC_u16Reversed = 1;
	if (copy_s32Num == 0) {
		H_LCD_void_sendData('0');
	} else {
		while (copy_s32Num != 0) {
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	9e 81       	ldd	r25, Y+6	; 0x06
    2a68:	af 81       	ldd	r26, Y+7	; 0x07
    2a6a:	b8 85       	ldd	r27, Y+8	; 0x08
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	a1 05       	cpc	r26, r1
    2a70:	b1 05       	cpc	r27, r1
    2a72:	11 f6       	brne	.-124    	; 0x29f8 <H_LCD_void_sendIntNum+0x4c>
    2a74:	23 c0       	rjmp	.+70     	; 0x2abc <H_LCD_void_sendIntNum+0x110>
			LOC_u16Reversed = (LOC_u16Reversed * 10) + (copy_s32Num % 10);
			copy_s32Num /= 10;
		}
		while (LOC_u16Reversed != 1) {
			H_LCD_void_sendData(LOC_u16Reversed % 10 + '0');
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a7c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a7e:	2a e0       	ldi	r18, 0x0A	; 10
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodsi4>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	80 5d       	subi	r24, 0xD0	; 208
    2a94:	0e 94 98 14 	call	0x2930	; 0x2930 <H_LCD_void_sendData>
			LOC_u16Reversed /= 10;
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a9e:	bc 81       	ldd	r27, Y+4	; 0x04
    2aa0:	2a e0       	ldi	r18, 0x0A	; 10
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__udivmodsi4>
    2ab0:	da 01       	movw	r26, r20
    2ab2:	c9 01       	movw	r24, r18
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	9a 83       	std	Y+2, r25	; 0x02
    2ab8:	ab 83       	std	Y+3, r26	; 0x03
    2aba:	bc 83       	std	Y+4, r27	; 0x04
	} else {
		while (copy_s32Num != 0) {
			LOC_u16Reversed = (LOC_u16Reversed * 10) + (copy_s32Num % 10);
			copy_s32Num /= 10;
		}
		while (LOC_u16Reversed != 1) {
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ac2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ac4:	81 30       	cpi	r24, 0x01	; 1
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	a1 05       	cpc	r26, r1
    2aca:	b1 05       	cpc	r27, r1
    2acc:	a1 f6       	brne	.-88     	; 0x2a76 <H_LCD_void_sendIntNum+0xca>
//		H_LCD_void_sendData('-');
//		copy_s32Num *= (-1);
//	}
//	ltoa(copy_s32Num,s,10);
//	H_LCD_void_sendString(s);
}
    2ace:	28 96       	adiw	r28, 0x08	; 8
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	08 95       	ret

00002ae8 <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	6e 97       	sbiw	r28, 0x1e	; 30
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	8d 8f       	std	Y+29, r24	; 0x1d
    2afe:	6e 8f       	std	Y+30, r22	; 0x1e
	u8 firstCharAdr[]={0x80,0xC0,0x94,0xD4};
    2b00:	80 e8       	ldi	r24, 0x80	; 128
    2b02:	89 8f       	std	Y+25, r24	; 0x19
    2b04:	80 ec       	ldi	r24, 0xC0	; 192
    2b06:	8a 8f       	std	Y+26, r24	; 0x1a
    2b08:	84 e9       	ldi	r24, 0x94	; 148
    2b0a:	8b 8f       	std	Y+27, r24	; 0x1b
    2b0c:	84 ed       	ldi	r24, 0xD4	; 212
    2b0e:	8c 8f       	std	Y+28, r24	; 0x1c
	H_LCD_void_sendCommand(firstCharAdr[copy_u8Col-1]+copy_u8Row-1);
    2b10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b12:	88 2f       	mov	r24, r24
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9c 01       	movw	r18, r24
    2b18:	21 50       	subi	r18, 0x01	; 1
    2b1a:	30 40       	sbci	r19, 0x00	; 0
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	49 96       	adiw	r24, 0x19	; 25
    2b20:	fc 01       	movw	r30, r24
    2b22:	e2 0f       	add	r30, r18
    2b24:	f3 1f       	adc	r31, r19
    2b26:	90 81       	ld	r25, Z
    2b28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b2a:	89 0f       	add	r24, r25
    2b2c:	81 50       	subi	r24, 0x01	; 1
    2b2e:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a8 ec       	ldi	r26, 0xC8	; 200
    2b38:	b2 e4       	ldi	r27, 0x42	; 66
    2b3a:	8d 8b       	std	Y+21, r24	; 0x15
    2b3c:	9e 8b       	std	Y+22, r25	; 0x16
    2b3e:	af 8b       	std	Y+23, r26	; 0x17
    2b40:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	2b ea       	ldi	r18, 0xAB	; 171
    2b4c:	3a ea       	ldi	r19, 0xAA	; 170
    2b4e:	4a ea       	ldi	r20, 0xAA	; 170
    2b50:	50 e4       	ldi	r21, 0x40	; 64
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	89 8b       	std	Y+17, r24	; 0x11
    2b5c:	9a 8b       	std	Y+18, r25	; 0x12
    2b5e:	ab 8b       	std	Y+19, r26	; 0x13
    2b60:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b62:	69 89       	ldd	r22, Y+17	; 0x11
    2b64:	7a 89       	ldd	r23, Y+18	; 0x12
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	1c f4       	brge	.+6      	; 0x2b80 <H_LCD_void_gotoXY+0x98>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	88 8b       	std	Y+16, r24	; 0x10
    2b7e:	91 c0       	rjmp	.+290    	; 0x2ca2 <H_LCD_void_gotoXY+0x1ba>
	else if (__tmp > 255)
    2b80:	69 89       	ldd	r22, Y+17	; 0x11
    2b82:	7a 89       	ldd	r23, Y+18	; 0x12
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	4f e7       	ldi	r20, 0x7F	; 127
    2b8e:	53 e4       	ldi	r21, 0x43	; 67
    2b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b94:	18 16       	cp	r1, r24
    2b96:	0c f0       	brlt	.+2      	; 0x2b9a <H_LCD_void_gotoXY+0xb2>
    2b98:	7b c0       	rjmp	.+246    	; 0x2c90 <H_LCD_void_gotoXY+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    2b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a e7       	ldi	r20, 0x7A	; 122
    2ba8:	54 e4       	ldi	r21, 0x44	; 68
    2baa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	8c 87       	std	Y+12, r24	; 0x0c
    2bb4:	9d 87       	std	Y+13, r25	; 0x0d
    2bb6:	ae 87       	std	Y+14, r26	; 0x0e
    2bb8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bba:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	4a e7       	ldi	r20, 0x7A	; 122
    2bc8:	55 e4       	ldi	r21, 0x45	; 69
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	88 87       	std	Y+8, r24	; 0x08
    2bd4:	99 87       	std	Y+9, r25	; 0x09
    2bd6:	aa 87       	std	Y+10, r26	; 0x0a
    2bd8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2bda:	68 85       	ldd	r22, Y+8	; 0x08
    2bdc:	79 85       	ldd	r23, Y+9	; 0x09
    2bde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2be0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e8       	ldi	r20, 0x80	; 128
    2be8:	5f e3       	ldi	r21, 0x3F	; 63
    2bea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bee:	88 23       	and	r24, r24
    2bf0:	2c f4       	brge	.+10     	; 0x2bfc <H_LCD_void_gotoXY+0x114>
		__ticks = 1;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	9f 83       	std	Y+7, r25	; 0x07
    2bf8:	8e 83       	std	Y+6, r24	; 0x06
    2bfa:	3f c0       	rjmp	.+126    	; 0x2c7a <H_LCD_void_gotoXY+0x192>
	else if (__tmp > 65535)
    2bfc:	68 85       	ldd	r22, Y+8	; 0x08
    2bfe:	79 85       	ldd	r23, Y+9	; 0x09
    2c00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	3f ef       	ldi	r19, 0xFF	; 255
    2c08:	4f e7       	ldi	r20, 0x7F	; 127
    2c0a:	57 e4       	ldi	r21, 0x47	; 71
    2c0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c10:	18 16       	cp	r1, r24
    2c12:	4c f5       	brge	.+82     	; 0x2c66 <H_LCD_void_gotoXY+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c14:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c16:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c18:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e2       	ldi	r20, 0x20	; 32
    2c22:	51 e4       	ldi	r21, 0x41	; 65
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9f 83       	std	Y+7, r25	; 0x07
    2c3a:	8e 83       	std	Y+6, r24	; 0x06
    2c3c:	0f c0       	rjmp	.+30     	; 0x2c5c <H_LCD_void_gotoXY+0x174>
    2c3e:	80 e9       	ldi	r24, 0x90	; 144
    2c40:	91 e0       	ldi	r25, 0x01	; 1
    2c42:	9d 83       	std	Y+5, r25	; 0x05
    2c44:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c46:	8c 81       	ldd	r24, Y+4	; 0x04
    2c48:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <H_LCD_void_gotoXY+0x162>
    2c4e:	9d 83       	std	Y+5, r25	; 0x05
    2c50:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c52:	8e 81       	ldd	r24, Y+6	; 0x06
    2c54:	9f 81       	ldd	r25, Y+7	; 0x07
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	9f 83       	std	Y+7, r25	; 0x07
    2c5a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	69 f7       	brne	.-38     	; 0x2c3e <H_LCD_void_gotoXY+0x156>
    2c64:	24 c0       	rjmp	.+72     	; 0x2cae <H_LCD_void_gotoXY+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c66:	68 85       	ldd	r22, Y+8	; 0x08
    2c68:	79 85       	ldd	r23, Y+9	; 0x09
    2c6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	9f 83       	std	Y+7, r25	; 0x07
    2c78:	8e 83       	std	Y+6, r24	; 0x06
    2c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7e:	9b 83       	std	Y+3, r25	; 0x03
    2c80:	8a 83       	std	Y+2, r24	; 0x02
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <H_LCD_void_gotoXY+0x19e>
    2c8a:	9b 83       	std	Y+3, r25	; 0x03
    2c8c:	8a 83       	std	Y+2, r24	; 0x02
    2c8e:	0f c0       	rjmp	.+30     	; 0x2cae <H_LCD_void_gotoXY+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c90:	69 89       	ldd	r22, Y+17	; 0x11
    2c92:	7a 89       	ldd	r23, Y+18	; 0x12
    2c94:	8b 89       	ldd	r24, Y+19	; 0x13
    2c96:	9c 89       	ldd	r25, Y+20	; 0x14
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	88 8b       	std	Y+16, r24	; 0x10
    2ca2:	88 89       	ldd	r24, Y+16	; 0x10
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	8a 95       	dec	r24
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <H_LCD_void_gotoXY+0x1c0>
    2cac:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    2cae:	6e 96       	adiw	r28, 0x1e	; 30
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <L298N_Init>:

#include "TIMER0_int.h"


void L298N_Init(u8 DIR,u8 EN)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <L298N_Init+0x6>
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <L298N_Init+0x8>
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <L298N_Init+0xa>
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	6a 83       	std	Y+2, r22	; 0x02
	switch(DIR)
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	3e 83       	std	Y+6, r19	; 0x06
    2cda:	2d 83       	std	Y+5, r18	; 0x05
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	31 f0       	breq	.+12     	; 0x2cf0 <L298N_Init+0x30>
    2ce4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ce6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ce8:	21 30       	cpi	r18, 0x01	; 1
    2cea:	31 05       	cpc	r19, r1
    2cec:	31 f0       	breq	.+12     	; 0x2cfa <L298N_Init+0x3a>
    2cee:	09 c0       	rjmp	.+18     	; 0x2d02 <L298N_Init+0x42>
	{
	case L298N_FORWARD: M_Dio_void_setPinValue(L298N_DIR, DIO_LOW);break;
    2cf0:	89 e1       	ldi	r24, 0x19	; 25
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
    2cf8:	04 c0       	rjmp	.+8      	; 0x2d02 <L298N_Init+0x42>
	case L298N_REVERSE: M_Dio_void_setPinValue(L298N_DIR, DIO_HIGH);break;
    2cfa:	89 e1       	ldi	r24, 0x19	; 25
    2cfc:	61 e0       	ldi	r22, 0x01	; 1
    2cfe:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
	}

	switch(EN)
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	3c 83       	std	Y+4, r19	; 0x04
    2d0a:	2b 83       	std	Y+3, r18	; 0x03
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	31 f0       	breq	.+12     	; 0x2d20 <L298N_Init+0x60>
    2d14:	2b 81       	ldd	r18, Y+3	; 0x03
    2d16:	3c 81       	ldd	r19, Y+4	; 0x04
    2d18:	21 30       	cpi	r18, 0x01	; 1
    2d1a:	31 05       	cpc	r19, r1
    2d1c:	31 f0       	breq	.+12     	; 0x2d2a <L298N_Init+0x6a>
    2d1e:	09 c0       	rjmp	.+18     	; 0x2d32 <L298N_Init+0x72>
	{
	case L298N_DISABLE: M_Dio_void_setPinValue(L298N_EN, DIO_HIGH);break;
    2d20:	8a e1       	ldi	r24, 0x1A	; 26
    2d22:	61 e0       	ldi	r22, 0x01	; 1
    2d24:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
    2d28:	04 c0       	rjmp	.+8      	; 0x2d32 <L298N_Init+0x72>
	case L298N_ENABLE: M_Dio_void_setPinValue(L298N_EN, DIO_LOW);break;
    2d2a:	8a e1       	ldi	r24, 0x1A	; 26
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
	}

}
    2d32:	26 96       	adiw	r28, 0x06	; 6
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <L298N_Start>:


void L298N_Start(u8 freq,u8 duty)
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <L298N_Start+0x6>
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	6a 83       	std	Y+2, r22	; 0x02
	M_TIMER0_void_setphaseCorrectPWM(freq,duty);
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a0 e0       	ldi	r26, 0x00	; 0
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	4a 81       	ldd	r20, Y+2	; 0x02
    2d62:	0e 94 be 08 	call	0x117c	; 0x117c <M_TIMER0_void_setphaseCorrectPWM>

}
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	cf 91       	pop	r28
    2d6c:	df 91       	pop	r29
    2d6e:	08 95       	ret

00002d70 <H_KEYPAD_u8_getPressedKey>:

const static u8 rows[4]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
const static u8 cols[4]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};


u8 H_KEYPAD_u8_getPressedKey(void){
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	ae 97       	sbiw	r28, 0x2e	; 46
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
	u8 r,c,rc;

	u8 colloc;

	do{
		KEY_PTR &= 0xC3;					//PULL Down all KEYPAD rows
    2d84:	a5 e3       	ldi	r26, 0x35	; 53
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e5 e3       	ldi	r30, 0x35	; 53
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	83 7c       	andi	r24, 0xC3	; 195
    2d90:	8c 93       	st	X, r24
		colloc = (KEY_PIN & 0xE8);			//Read All Columns
    2d92:	e0 e3       	ldi	r30, 0x30	; 48
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	88 7e       	andi	r24, 0xE8	; 232
    2d9a:	8b a7       	std	Y+43, r24	; 0x2b

	}while(colloc != 0xE8);					//Check until all keys are released
    2d9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d9e:	88 3e       	cpi	r24, 0xE8	; 232
    2da0:	89 f7       	brne	.-30     	; 0x2d84 <H_KEYPAD_u8_getPressedKey+0x14>
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	a0 ea       	ldi	r26, 0xA0	; 160
    2da8:	b1 e4       	ldi	r27, 0x41	; 65
    2daa:	8f a3       	std	Y+39, r24	; 0x27
    2dac:	98 a7       	std	Y+40, r25	; 0x28
    2dae:	a9 a7       	std	Y+41, r26	; 0x29
    2db0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db2:	6f a1       	ldd	r22, Y+39	; 0x27
    2db4:	78 a5       	ldd	r23, Y+40	; 0x28
    2db6:	89 a5       	ldd	r24, Y+41	; 0x29
    2db8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	4a e7       	ldi	r20, 0x7A	; 122
    2dc0:	55 e4       	ldi	r21, 0x45	; 69
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	8b a3       	std	Y+35, r24	; 0x23
    2dcc:	9c a3       	std	Y+36, r25	; 0x24
    2dce:	ad a3       	std	Y+37, r26	; 0x25
    2dd0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e8       	ldi	r20, 0x80	; 128
    2de0:	5f e3       	ldi	r21, 0x3F	; 63
    2de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de6:	88 23       	and	r24, r24
    2de8:	2c f4       	brge	.+10     	; 0x2df4 <H_KEYPAD_u8_getPressedKey+0x84>
		__ticks = 1;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	9a a3       	std	Y+34, r25	; 0x22
    2df0:	89 a3       	std	Y+33, r24	; 0x21
    2df2:	3f c0       	rjmp	.+126    	; 0x2e72 <H_KEYPAD_u8_getPressedKey+0x102>
	else if (__tmp > 65535)
    2df4:	6b a1       	ldd	r22, Y+35	; 0x23
    2df6:	7c a1       	ldd	r23, Y+36	; 0x24
    2df8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	3f ef       	ldi	r19, 0xFF	; 255
    2e00:	4f e7       	ldi	r20, 0x7F	; 127
    2e02:	57 e4       	ldi	r21, 0x47	; 71
    2e04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e08:	18 16       	cp	r1, r24
    2e0a:	4c f5       	brge	.+82     	; 0x2e5e <H_KEYPAD_u8_getPressedKey+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e0e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e10:	89 a5       	ldd	r24, Y+41	; 0x29
    2e12:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e2       	ldi	r20, 0x20	; 32
    2e1a:	51 e4       	ldi	r21, 0x41	; 65
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9a a3       	std	Y+34, r25	; 0x22
    2e32:	89 a3       	std	Y+33, r24	; 0x21
    2e34:	0f c0       	rjmp	.+30     	; 0x2e54 <H_KEYPAD_u8_getPressedKey+0xe4>
    2e36:	80 e9       	ldi	r24, 0x90	; 144
    2e38:	91 e0       	ldi	r25, 0x01	; 1
    2e3a:	98 a3       	std	Y+32, r25	; 0x20
    2e3c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e40:	98 a1       	ldd	r25, Y+32	; 0x20
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <H_KEYPAD_u8_getPressedKey+0xd2>
    2e46:	98 a3       	std	Y+32, r25	; 0x20
    2e48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	9a a3       	std	Y+34, r25	; 0x22
    2e52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e54:	89 a1       	ldd	r24, Y+33	; 0x21
    2e56:	9a a1       	ldd	r25, Y+34	; 0x22
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	69 f7       	brne	.-38     	; 0x2e36 <H_KEYPAD_u8_getPressedKey+0xc6>
    2e5c:	14 c0       	rjmp	.+40     	; 0x2e86 <H_KEYPAD_u8_getPressedKey+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e60:	7c a1       	ldd	r23, Y+36	; 0x24
    2e62:	8d a1       	ldd	r24, Y+37	; 0x25
    2e64:	9e a1       	ldd	r25, Y+38	; 0x26
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	9a a3       	std	Y+34, r25	; 0x22
    2e70:	89 a3       	std	Y+33, r24	; 0x21
    2e72:	89 a1       	ldd	r24, Y+33	; 0x21
    2e74:	9a a1       	ldd	r25, Y+34	; 0x22
    2e76:	9e 8f       	std	Y+30, r25	; 0x1e
    2e78:	8d 8f       	std	Y+29, r24	; 0x1d
    2e7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <H_KEYPAD_u8_getPressedKey+0x10e>
    2e82:	9e 8f       	std	Y+30, r25	; 0x1e
    2e84:	8d 8f       	std	Y+29, r24	; 0x1d

	do{
		do{
			_delay_ms(20);					//Call Delay
			colloc = (KEY_PIN & 0xE8);		//See if any key is pressed
    2e86:	e0 e3       	ldi	r30, 0x30	; 48
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	88 7e       	andi	r24, 0xE8	; 232
    2e8e:	8b a7       	std	Y+43, r24	; 0x2b
		}while(colloc == 0xE8);				//Keep Checking for key press
    2e90:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e92:	88 3e       	cpi	r24, 0xE8	; 232
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <H_KEYPAD_u8_getPressedKey+0x128>
    2e96:	85 cf       	rjmp	.-246    	; 0x2da2 <H_KEYPAD_u8_getPressedKey+0x32>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	a0 ea       	ldi	r26, 0xA0	; 160
    2e9e:	b1 e4       	ldi	r27, 0x41	; 65
    2ea0:	89 8f       	std	Y+25, r24	; 0x19
    2ea2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ea4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ea6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	4a e7       	ldi	r20, 0x7A	; 122
    2eb6:	55 e4       	ldi	r21, 0x45	; 69
    2eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	8d 8b       	std	Y+21, r24	; 0x15
    2ec2:	9e 8b       	std	Y+22, r25	; 0x16
    2ec4:	af 8b       	std	Y+23, r26	; 0x17
    2ec6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eca:	7e 89       	ldd	r23, Y+22	; 0x16
    2ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ece:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e8       	ldi	r20, 0x80	; 128
    2ed6:	5f e3       	ldi	r21, 0x3F	; 63
    2ed8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2edc:	88 23       	and	r24, r24
    2ede:	2c f4       	brge	.+10     	; 0x2eea <H_KEYPAD_u8_getPressedKey+0x17a>
		__ticks = 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	9c 8b       	std	Y+20, r25	; 0x14
    2ee6:	8b 8b       	std	Y+19, r24	; 0x13
    2ee8:	3f c0       	rjmp	.+126    	; 0x2f68 <H_KEYPAD_u8_getPressedKey+0x1f8>
	else if (__tmp > 65535)
    2eea:	6d 89       	ldd	r22, Y+21	; 0x15
    2eec:	7e 89       	ldd	r23, Y+22	; 0x16
    2eee:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	3f ef       	ldi	r19, 0xFF	; 255
    2ef6:	4f e7       	ldi	r20, 0x7F	; 127
    2ef8:	57 e4       	ldi	r21, 0x47	; 71
    2efa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2efe:	18 16       	cp	r1, r24
    2f00:	4c f5       	brge	.+82     	; 0x2f54 <H_KEYPAD_u8_getPressedKey+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f02:	69 8d       	ldd	r22, Y+25	; 0x19
    2f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e2       	ldi	r20, 0x20	; 32
    2f10:	51 e4       	ldi	r21, 0x41	; 65
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
    2f2a:	0f c0       	rjmp	.+30     	; 0x2f4a <H_KEYPAD_u8_getPressedKey+0x1da>
    2f2c:	80 e9       	ldi	r24, 0x90	; 144
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	9a 8b       	std	Y+18, r25	; 0x12
    2f32:	89 8b       	std	Y+17, r24	; 0x11
    2f34:	89 89       	ldd	r24, Y+17	; 0x11
    2f36:	9a 89       	ldd	r25, Y+18	; 0x12
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <H_KEYPAD_u8_getPressedKey+0x1c8>
    2f3c:	9a 8b       	std	Y+18, r25	; 0x12
    2f3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f40:	8b 89       	ldd	r24, Y+19	; 0x13
    2f42:	9c 89       	ldd	r25, Y+20	; 0x14
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	9c 8b       	std	Y+20, r25	; 0x14
    2f48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	69 f7       	brne	.-38     	; 0x2f2c <H_KEYPAD_u8_getPressedKey+0x1bc>
    2f52:	14 c0       	rjmp	.+40     	; 0x2f7c <H_KEYPAD_u8_getPressedKey+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f54:	6d 89       	ldd	r22, Y+21	; 0x15
    2f56:	7e 89       	ldd	r23, Y+22	; 0x16
    2f58:	8f 89       	ldd	r24, Y+23	; 0x17
    2f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	9c 8b       	std	Y+20, r25	; 0x14
    2f66:	8b 8b       	std	Y+19, r24	; 0x13
    2f68:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6c:	98 8b       	std	Y+16, r25	; 0x10
    2f6e:	8f 87       	std	Y+15, r24	; 0x0f
    2f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f72:	98 89       	ldd	r25, Y+16	; 0x10
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <H_KEYPAD_u8_getPressedKey+0x204>
    2f78:	98 8b       	std	Y+16, r25	; 0x10
    2f7a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		colloc = (KEY_PIN & 0xE8);			//Read columns
    2f7c:	e0 e3       	ldi	r30, 0x30	; 48
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	88 7e       	andi	r24, 0xE8	; 232
    2f84:	8b a7       	std	Y+43, r24	; 0x2b
	}while(colloc == 0xE8);					//Wait for key press
    2f86:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f88:	88 3e       	cpi	r24, 0xE8	; 232
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <H_KEYPAD_u8_getPressedKey+0x21e>
    2f8c:	0a cf       	rjmp	.-492    	; 0x2da2 <H_KEYPAD_u8_getPressedKey+0x32>

//	/*
//	 * Check code for PADs
//	 */

	for (r=0;r<4;r++)
    2f8e:	1e a6       	std	Y+46, r1	; 0x2e
    2f90:	a8 c0       	rjmp	.+336    	; 0x30e2 <H_KEYPAD_u8_getPressedKey+0x372>
	{
		KEY_PTR=0xFF;
    2f92:	e5 e3       	ldi	r30, 0x35	; 53
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	8f ef       	ldi	r24, 0xFF	; 255
    2f98:	80 83       	st	Z, r24
		M_Dio_void_setPinValue(rows[r], DIO_LOW);
    2f9a:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	ec 51       	subi	r30, 0x1C	; 28
    2fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa6:	80 81       	ld	r24, Z
    2fa8:	60 e0       	ldi	r22, 0x00	; 0
    2faa:	0e 94 bd 0c 	call	0x197a	; 0x197a <M_Dio_void_setPinValue>
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	a0 e8       	ldi	r26, 0x80	; 128
    2fb4:	bf e3       	ldi	r27, 0x3F	; 63
    2fb6:	8b 87       	std	Y+11, r24	; 0x0b
    2fb8:	9c 87       	std	Y+12, r25	; 0x0c
    2fba:	ad 87       	std	Y+13, r26	; 0x0d
    2fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	4a e7       	ldi	r20, 0x7A	; 122
    2fcc:	55 e4       	ldi	r21, 0x45	; 69
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	8f 83       	std	Y+7, r24	; 0x07
    2fd8:	98 87       	std	Y+8, r25	; 0x08
    2fda:	a9 87       	std	Y+9, r26	; 0x09
    2fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fde:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe0:	78 85       	ldd	r23, Y+8	; 0x08
    2fe2:	89 85       	ldd	r24, Y+9	; 0x09
    2fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e8       	ldi	r20, 0x80	; 128
    2fec:	5f e3       	ldi	r21, 0x3F	; 63
    2fee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ff2:	88 23       	and	r24, r24
    2ff4:	2c f4       	brge	.+10     	; 0x3000 <H_KEYPAD_u8_getPressedKey+0x290>
		__ticks = 1;
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
    2ffe:	3f c0       	rjmp	.+126    	; 0x307e <H_KEYPAD_u8_getPressedKey+0x30e>
	else if (__tmp > 65535)
    3000:	6f 81       	ldd	r22, Y+7	; 0x07
    3002:	78 85       	ldd	r23, Y+8	; 0x08
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	3f ef       	ldi	r19, 0xFF	; 255
    300c:	4f e7       	ldi	r20, 0x7F	; 127
    300e:	57 e4       	ldi	r21, 0x47	; 71
    3010:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3014:	18 16       	cp	r1, r24
    3016:	4c f5       	brge	.+82     	; 0x306a <H_KEYPAD_u8_getPressedKey+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3018:	6b 85       	ldd	r22, Y+11	; 0x0b
    301a:	7c 85       	ldd	r23, Y+12	; 0x0c
    301c:	8d 85       	ldd	r24, Y+13	; 0x0d
    301e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e2       	ldi	r20, 0x20	; 32
    3026:	51 e4       	ldi	r21, 0x41	; 65
    3028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	bc 01       	movw	r22, r24
    3032:	cd 01       	movw	r24, r26
    3034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
    3040:	0f c0       	rjmp	.+30     	; 0x3060 <H_KEYPAD_u8_getPressedKey+0x2f0>
    3042:	80 e9       	ldi	r24, 0x90	; 144
    3044:	91 e0       	ldi	r25, 0x01	; 1
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	8b 83       	std	Y+3, r24	; 0x03
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <H_KEYPAD_u8_getPressedKey+0x2de>
    3052:	9c 83       	std	Y+4, r25	; 0x04
    3054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	9e 83       	std	Y+6, r25	; 0x06
    305e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3060:	8d 81       	ldd	r24, Y+5	; 0x05
    3062:	9e 81       	ldd	r25, Y+6	; 0x06
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	69 f7       	brne	.-38     	; 0x3042 <H_KEYPAD_u8_getPressedKey+0x2d2>
    3068:	14 c0       	rjmp	.+40     	; 0x3092 <H_KEYPAD_u8_getPressedKey+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306a:	6f 81       	ldd	r22, Y+7	; 0x07
    306c:	78 85       	ldd	r23, Y+8	; 0x08
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	9a 83       	std	Y+2, r25	; 0x02
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <H_KEYPAD_u8_getPressedKey+0x31a>
    308e:	9a 83       	std	Y+2, r25	; 0x02
    3090:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		for(c=0;c<4;c++)
    3092:	1d a6       	std	Y+45, r1	; 0x2d
    3094:	20 c0       	rjmp	.+64     	; 0x30d6 <H_KEYPAD_u8_getPressedKey+0x366>
		{
			if(M_Dio_en_getPinValue(cols[c])==DIO_LOW) rc=keypad[r][c];
    3096:	8d a5       	ldd	r24, Y+45	; 0x2d
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	fc 01       	movw	r30, r24
    309e:	e8 51       	subi	r30, 0x18	; 24
    30a0:	fe 4f       	sbci	r31, 0xFE	; 254
    30a2:	80 81       	ld	r24, Z
    30a4:	0e 94 37 0c 	call	0x186e	; 0x186e <M_Dio_en_getPinValue>
    30a8:	88 23       	and	r24, r24
    30aa:	91 f4       	brne	.+36     	; 0x30d0 <H_KEYPAD_u8_getPressedKey+0x360>
    30ac:	8e a5       	ldd	r24, Y+46	; 0x2e
    30ae:	48 2f       	mov	r20, r24
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	ca 01       	movw	r24, r20
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	82 0f       	add	r24, r18
    30c4:	93 1f       	adc	r25, r19
    30c6:	fc 01       	movw	r30, r24
    30c8:	ec 52       	subi	r30, 0x2C	; 44
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	80 81       	ld	r24, Z
    30ce:	8c a7       	std	Y+44, r24	; 0x2c
	for (r=0;r<4;r++)
	{
		KEY_PTR=0xFF;
		M_Dio_void_setPinValue(rows[r], DIO_LOW);
		_delay_ms(1);
		for(c=0;c<4;c++)
    30d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d2:	8f 5f       	subi	r24, 0xFF	; 255
    30d4:	8d a7       	std	Y+45, r24	; 0x2d
    30d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d8:	84 30       	cpi	r24, 0x04	; 4
    30da:	e8 f2       	brcs	.-70     	; 0x3096 <H_KEYPAD_u8_getPressedKey+0x326>

//	/*
//	 * Check code for PADs
//	 */

	for (r=0;r<4;r++)
    30dc:	8e a5       	ldd	r24, Y+46	; 0x2e
    30de:	8f 5f       	subi	r24, 0xFF	; 255
    30e0:	8e a7       	std	Y+46, r24	; 0x2e
    30e2:	8e a5       	ldd	r24, Y+46	; 0x2e
    30e4:	84 30       	cpi	r24, 0x04	; 4
    30e6:	08 f4       	brcc	.+2      	; 0x30ea <H_KEYPAD_u8_getPressedKey+0x37a>
    30e8:	54 cf       	rjmp	.-344    	; 0x2f92 <H_KEYPAD_u8_getPressedKey+0x222>
		{
			if(M_Dio_en_getPinValue(cols[c])==DIO_LOW) rc=keypad[r][c];

		}
	}
	return rc;
    30ea:	8c a5       	ldd	r24, Y+44	; 0x2c
}
    30ec:	ae 96       	adiw	r28, 0x2e	; 46
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <MENU>:
u8 Duty=10;
u8 Freq=1;


void MENU()
{
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	62 97       	sbiw	r28, 0x12	; 18
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61

/**********************************DECLARATION****************************************/
	u8 d=0;
    3112:	18 8a       	std	Y+16, r1	; 0x10
	u8 Duty_counter=0;
    3114:	1f 86       	std	Y+15, r1	; 0x0f
	Port_Init(PORT_Config_Arr);
    3116:	8c ee       	ldi	r24, 0xEC	; 236
    3118:	91 e0       	ldi	r25, 0x01	; 1
    311a:	0e 94 c1 09 	call	0x1382	; 0x1382 <Port_Init>

/*************************************************************************************/

/**********************************INTIALIZATION****************************************/

	H_LCD_void_Init();
    311e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <H_LCD_void_Init>
/*************************************************************************************/

	H_LCD_void_sendString("Select Frequency:");
    3122:	80 e6       	ldi	r24, 0x60	; 96
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 2);
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	62 e0       	ldi	r22, 0x02	; 2
    312e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("1-31kHz");
    3132:	82 e7       	ldi	r24, 0x72	; 114
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>
	H_LCD_void_gotoXY(9, 2);
    313a:	89 e0       	ldi	r24, 0x09	; 9
    313c:	62 e0       	ldi	r22, 0x02	; 2
    313e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("2-4kHz");
    3142:	8a e7       	ldi	r24, 0x7A	; 122
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>

	H_LCD_void_gotoXY(1, 3);
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	63 e0       	ldi	r22, 0x03	; 3
    314e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("3-500Hz");
    3152:	81 e8       	ldi	r24, 0x81	; 129
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>

	H_LCD_void_gotoXY(9, 3);
    315a:	89 e0       	ldi	r24, 0x09	; 9
    315c:	63 e0       	ldi	r22, 0x03	; 3
    315e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("4-30Hz");
    3162:	89 e8       	ldi	r24, 0x89	; 137
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>


	switch(H_KEYPAD_u8_getPressedKey())
    316a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_KEYPAD_u8_getPressedKey>
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	3a 8b       	std	Y+18, r19	; 0x12
    3174:	29 8b       	std	Y+17, r18	; 0x11
    3176:	89 89       	ldd	r24, Y+17	; 0x11
    3178:	9a 89       	ldd	r25, Y+18	; 0x12
    317a:	82 30       	cpi	r24, 0x02	; 2
    317c:	91 05       	cpc	r25, r1
    317e:	09 f1       	breq	.+66     	; 0x31c2 <MENU+0xc4>
    3180:	29 89       	ldd	r18, Y+17	; 0x11
    3182:	3a 89       	ldd	r19, Y+18	; 0x12
    3184:	23 30       	cpi	r18, 0x03	; 3
    3186:	31 05       	cpc	r19, r1
    3188:	34 f4       	brge	.+12     	; 0x3196 <MENU+0x98>
    318a:	89 89       	ldd	r24, Y+17	; 0x11
    318c:	9a 89       	ldd	r25, Y+18	; 0x12
    318e:	81 30       	cpi	r24, 0x01	; 1
    3190:	91 05       	cpc	r25, r1
    3192:	61 f0       	breq	.+24     	; 0x31ac <MENU+0xae>
    3194:	36 c0       	rjmp	.+108    	; 0x3202 <MENU+0x104>
    3196:	29 89       	ldd	r18, Y+17	; 0x11
    3198:	3a 89       	ldd	r19, Y+18	; 0x12
    319a:	23 30       	cpi	r18, 0x03	; 3
    319c:	31 05       	cpc	r19, r1
    319e:	e1 f0       	breq	.+56     	; 0x31d8 <MENU+0xda>
    31a0:	89 89       	ldd	r24, Y+17	; 0x11
    31a2:	9a 89       	ldd	r25, Y+18	; 0x12
    31a4:	84 30       	cpi	r24, 0x04	; 4
    31a6:	91 05       	cpc	r25, r1
    31a8:	11 f1       	breq	.+68     	; 0x31ee <MENU+0xf0>
    31aa:	2b c0       	rjmp	.+86     	; 0x3202 <MENU+0x104>
	{
	case 1:H_LCD_void_sendCommand(CLEAR_DISPLAY);H_LCD_void_sendString("31kHz");Freq=1;break;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
    31b2:	80 e9       	ldi	r24, 0x90	; 144
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	80 93 c9 01 	sts	0x01C9, r24
    31c0:	20 c0       	rjmp	.+64     	; 0x3202 <MENU+0x104>
	case 2:H_LCD_void_sendCommand(CLEAR_DISPLAY);H_LCD_void_sendString("4kHz");Freq=2;break;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
    31c8:	86 e9       	ldi	r24, 0x96	; 150
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	80 93 c9 01 	sts	0x01C9, r24
    31d6:	15 c0       	rjmp	.+42     	; 0x3202 <MENU+0x104>
	case 3:H_LCD_void_sendCommand(CLEAR_DISPLAY);H_LCD_void_sendString("500Hz");Freq=3;break;
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
    31de:	8b e9       	ldi	r24, 0x9B	; 155
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>
    31e6:	83 e0       	ldi	r24, 0x03	; 3
    31e8:	80 93 c9 01 	sts	0x01C9, r24
    31ec:	0a c0       	rjmp	.+20     	; 0x3202 <MENU+0x104>
	case 4:H_LCD_void_sendCommand(CLEAR_DISPLAY);H_LCD_void_sendString("122Hz");Freq=4;break;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
    31f4:	81 ea       	ldi	r24, 0xA1	; 161
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>
    31fc:	84 e0       	ldi	r24, 0x04	; 4
    31fe:	80 93 c9 01 	sts	0x01C9, r24
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	aa e7       	ldi	r26, 0x7A	; 122
    3208:	b4 e4       	ldi	r27, 0x44	; 68
    320a:	8b 87       	std	Y+11, r24	; 0x0b
    320c:	9c 87       	std	Y+12, r25	; 0x0c
    320e:	ad 87       	std	Y+13, r26	; 0x0d
    3210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6b 85       	ldd	r22, Y+11	; 0x0b
    3214:	7c 85       	ldd	r23, Y+12	; 0x0c
    3216:	8d 85       	ldd	r24, Y+13	; 0x0d
    3218:	9e 85       	ldd	r25, Y+14	; 0x0e
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a e7       	ldi	r20, 0x7A	; 122
    3220:	55 e4       	ldi	r21, 0x45	; 69
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	8f 83       	std	Y+7, r24	; 0x07
    322c:	98 87       	std	Y+8, r25	; 0x08
    322e:	a9 87       	std	Y+9, r26	; 0x09
    3230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <MENU+0x156>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9e 83       	std	Y+6, r25	; 0x06
    3250:	8d 83       	std	Y+5, r24	; 0x05
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <MENU+0x1d4>
	else if (__tmp > 65535)
    3254:	6f 81       	ldd	r22, Y+7	; 0x07
    3256:	78 85       	ldd	r23, Y+8	; 0x08
    3258:	89 85       	ldd	r24, Y+9	; 0x09
    325a:	9a 85       	ldd	r25, Y+10	; 0x0a
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <MENU+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6b 85       	ldd	r22, Y+11	; 0x0b
    326e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3270:	8d 85       	ldd	r24, Y+13	; 0x0d
    3272:	9e 85       	ldd	r25, Y+14	; 0x0e
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <MENU+0x1b6>
    3296:	80 e9       	ldi	r24, 0x90	; 144
    3298:	91 e0       	ldi	r25, 0x01	; 1
    329a:	9c 83       	std	Y+4, r25	; 0x04
    329c:	8b 83       	std	Y+3, r24	; 0x03
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	9c 81       	ldd	r25, Y+4	; 0x04
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <MENU+0x1a4>
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	9e 83       	std	Y+6, r25	; 0x06
    32b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <MENU+0x198>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <MENU+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	6f 81       	ldd	r22, Y+7	; 0x07
    32c0:	78 85       	ldd	r23, Y+8	; 0x08
    32c2:	89 85       	ldd	r24, Y+9	; 0x09
    32c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9e 83       	std	Y+6, r25	; 0x06
    32d0:	8d 83       	std	Y+5, r24	; 0x05
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <MENU+0x1e0>
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(1000);

	L298N_Start(Freq,Duty);
    32e6:	80 91 c9 01 	lds	r24, 0x01C9
    32ea:	48 2f       	mov	r20, r24
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	80 91 c8 01 	lds	r24, 0x01C8
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	ca 01       	movw	r24, r20
    32f8:	b9 01       	movw	r22, r18
    32fa:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <L298N_Start>

	H_LCD_void_sendCommand(CLEAR_DISPLAY);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	0e 94 a9 14 	call	0x2952	; 0x2952 <H_LCD_void_sendCommand>
	H_LCD_void_sendString("Enter Duty: ");
    3304:	87 ea       	ldi	r24, 0xA7	; 167
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 2);
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	62 e0       	ldi	r22, 0x02	; 2
    3310:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <H_LCD_void_gotoXY>



	Duty = H_KEYPAD_u8_getPressedKey();
    3314:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_KEYPAD_u8_getPressedKey>
    3318:	80 93 c8 01 	sts	0x01C8, r24
	H_LCD_void_sendData(Duty+'0');
    331c:	80 91 c8 01 	lds	r24, 0x01C8
    3320:	80 5d       	subi	r24, 0xD0	; 208
    3322:	0e 94 98 14 	call	0x2930	; 0x2930 <H_LCD_void_sendData>
	Duty_counter++;
    3326:	8f 85       	ldd	r24, Y+15	; 0x0f
    3328:	8f 5f       	subi	r24, 0xFF	; 255
    332a:	8f 87       	std	Y+15, r24	; 0x0f
    332c:	23 c0       	rjmp	.+70     	; 0x3374 <MENU+0x276>
	while(d != 'C')
	{
		d = H_KEYPAD_u8_getPressedKey();
    332e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_KEYPAD_u8_getPressedKey>
    3332:	88 8b       	std	Y+16, r24	; 0x10
		if(d == 'C')
    3334:	88 89       	ldd	r24, Y+16	; 0x10
    3336:	83 34       	cpi	r24, 0x43	; 67
    3338:	01 f1       	breq	.+64     	; 0x337a <MENU+0x27c>
			break;
		Duty *= 10;
    333a:	80 91 c8 01 	lds	r24, 0x01C8
    333e:	88 2f       	mov	r24, r24
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	9c 01       	movw	r18, r24
    3344:	22 0f       	add	r18, r18
    3346:	33 1f       	adc	r19, r19
    3348:	c9 01       	movw	r24, r18
    334a:	88 0f       	add	r24, r24
    334c:	99 1f       	adc	r25, r25
    334e:	88 0f       	add	r24, r24
    3350:	99 1f       	adc	r25, r25
    3352:	82 0f       	add	r24, r18
    3354:	93 1f       	adc	r25, r19
    3356:	80 93 c8 01 	sts	0x01C8, r24
		Duty += d;
    335a:	90 91 c8 01 	lds	r25, 0x01C8
    335e:	88 89       	ldd	r24, Y+16	; 0x10
    3360:	89 0f       	add	r24, r25
    3362:	80 93 c8 01 	sts	0x01C8, r24
		H_LCD_void_sendData(d+'0');
    3366:	88 89       	ldd	r24, Y+16	; 0x10
    3368:	80 5d       	subi	r24, 0xD0	; 208
    336a:	0e 94 98 14 	call	0x2930	; 0x2930 <H_LCD_void_sendData>
		Duty_counter++;
    336e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3370:	8f 5f       	subi	r24, 0xFF	; 255
    3372:	8f 87       	std	Y+15, r24	; 0x0f


	Duty = H_KEYPAD_u8_getPressedKey();
	H_LCD_void_sendData(Duty+'0');
	Duty_counter++;
	while(d != 'C')
    3374:	88 89       	ldd	r24, Y+16	; 0x10
    3376:	83 34       	cpi	r24, 0x43	; 67
    3378:	d1 f6       	brne	.-76     	; 0x332e <MENU+0x230>
		Duty_counter++;
	}



	H_LCD_void_gotoXY(1, 3);
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	63 e0       	ldi	r22, 0x03	; 3
    337e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <H_LCD_void_gotoXY>
	if(Duty<0 || Duty>100)
    3382:	80 91 c8 01 	lds	r24, 0x01C8
    3386:	85 36       	cpi	r24, 0x65	; 101
    3388:	38 f0       	brcs	.+14     	; 0x3398 <MENU+0x29a>
	{
		H_LCD_void_sendString("Wrong Value");
    338a:	84 eb       	ldi	r24, 0xB4	; 180
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 ba 14 	call	0x2974	; 0x2974 <H_LCD_void_sendString>
		Duty=0;
    3392:	10 92 c8 01 	sts	0x01C8, r1
    3396:	0a c0       	rjmp	.+20     	; 0x33ac <MENU+0x2ae>
	}
	else
	{
		H_LCD_void_sendIntNum(Duty);
    3398:	80 91 c8 01 	lds	r24, 0x01C8
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	a0 e0       	ldi	r26, 0x00	; 0
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 d6 14 	call	0x29ac	; 0x29ac <H_LCD_void_sendIntNum>
	}

	L298N_Start(Freq,Duty);
    33ac:	80 91 c9 01 	lds	r24, 0x01C9
    33b0:	48 2f       	mov	r20, r24
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	80 91 c8 01 	lds	r24, 0x01C8
    33b8:	28 2f       	mov	r18, r24
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	ca 01       	movw	r24, r20
    33be:	b9 01       	movw	r22, r18
    33c0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <L298N_Start>


}
    33c4:	62 96       	adiw	r28, 0x12	; 18
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <main>:
#include "main.h"
#include "Mcu_HW.h"


int main()
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	2e 97       	sbiw	r28, 0x0e	; 14
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61

	M_TIMER0_void_Timer_Init();
    33ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_TIMER0_void_Timer_Init>
	L298N_Init(L298N_REVERSE,L298N_DISABLE);
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <L298N_Init>



	while(1)
	{
		MENU();
    33f6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <MENU>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	aa e7       	ldi	r26, 0x7A	; 122
    3400:	b4 e4       	ldi	r27, 0x44	; 68
    3402:	8b 87       	std	Y+11, r24	; 0x0b
    3404:	9c 87       	std	Y+12, r25	; 0x0c
    3406:	ad 87       	std	Y+13, r26	; 0x0d
    3408:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340a:	6b 85       	ldd	r22, Y+11	; 0x0b
    340c:	7c 85       	ldd	r23, Y+12	; 0x0c
    340e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3410:	9e 85       	ldd	r25, Y+14	; 0x0e
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	4a e7       	ldi	r20, 0x7A	; 122
    3418:	55 e4       	ldi	r21, 0x45	; 69
    341a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	8f 83       	std	Y+7, r24	; 0x07
    3424:	98 87       	std	Y+8, r25	; 0x08
    3426:	a9 87       	std	Y+9, r26	; 0x09
    3428:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    342a:	6f 81       	ldd	r22, Y+7	; 0x07
    342c:	78 85       	ldd	r23, Y+8	; 0x08
    342e:	89 85       	ldd	r24, Y+9	; 0x09
    3430:	9a 85       	ldd	r25, Y+10	; 0x0a
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e8       	ldi	r20, 0x80	; 128
    3438:	5f e3       	ldi	r21, 0x3F	; 63
    343a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343e:	88 23       	and	r24, r24
    3440:	2c f4       	brge	.+10     	; 0x344c <main+0x76>
		__ticks = 1;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	9e 83       	std	Y+6, r25	; 0x06
    3448:	8d 83       	std	Y+5, r24	; 0x05
    344a:	3f c0       	rjmp	.+126    	; 0x34ca <main+0xf4>
	else if (__tmp > 65535)
    344c:	6f 81       	ldd	r22, Y+7	; 0x07
    344e:	78 85       	ldd	r23, Y+8	; 0x08
    3450:	89 85       	ldd	r24, Y+9	; 0x09
    3452:	9a 85       	ldd	r25, Y+10	; 0x0a
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	3f ef       	ldi	r19, 0xFF	; 255
    3458:	4f e7       	ldi	r20, 0x7F	; 127
    345a:	57 e4       	ldi	r21, 0x47	; 71
    345c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3460:	18 16       	cp	r1, r24
    3462:	4c f5       	brge	.+82     	; 0x34b6 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3464:	6b 85       	ldd	r22, Y+11	; 0x0b
    3466:	7c 85       	ldd	r23, Y+12	; 0x0c
    3468:	8d 85       	ldd	r24, Y+13	; 0x0d
    346a:	9e 85       	ldd	r25, Y+14	; 0x0e
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e2       	ldi	r20, 0x20	; 32
    3472:	51 e4       	ldi	r21, 0x41	; 65
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	bc 01       	movw	r22, r24
    347e:	cd 01       	movw	r24, r26
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	9e 83       	std	Y+6, r25	; 0x06
    348a:	8d 83       	std	Y+5, r24	; 0x05
    348c:	0f c0       	rjmp	.+30     	; 0x34ac <main+0xd6>
    348e:	80 e9       	ldi	r24, 0x90	; 144
    3490:	91 e0       	ldi	r25, 0x01	; 1
    3492:	9c 83       	std	Y+4, r25	; 0x04
    3494:	8b 83       	std	Y+3, r24	; 0x03
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	9c 81       	ldd	r25, Y+4	; 0x04
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <main+0xc4>
    349e:	9c 83       	std	Y+4, r25	; 0x04
    34a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a2:	8d 81       	ldd	r24, Y+5	; 0x05
    34a4:	9e 81       	ldd	r25, Y+6	; 0x06
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	9e 83       	std	Y+6, r25	; 0x06
    34aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ac:	8d 81       	ldd	r24, Y+5	; 0x05
    34ae:	9e 81       	ldd	r25, Y+6	; 0x06
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	69 f7       	brne	.-38     	; 0x348e <main+0xb8>
    34b4:	a0 cf       	rjmp	.-192    	; 0x33f6 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b6:	6f 81       	ldd	r22, Y+7	; 0x07
    34b8:	78 85       	ldd	r23, Y+8	; 0x08
    34ba:	89 85       	ldd	r24, Y+9	; 0x09
    34bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	9e 83       	std	Y+6, r25	; 0x06
    34c8:	8d 83       	std	Y+5, r24	; 0x05
    34ca:	8d 81       	ldd	r24, Y+5	; 0x05
    34cc:	9e 81       	ldd	r25, Y+6	; 0x06
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	89 83       	std	Y+1, r24	; 0x01
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	9a 81       	ldd	r25, Y+2	; 0x02
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <main+0x100>
    34da:	9a 83       	std	Y+2, r25	; 0x02
    34dc:	89 83       	std	Y+1, r24	; 0x01
    34de:	8b cf       	rjmp	.-234    	; 0x33f6 <main+0x20>

000034e0 <__mulsi3>:
    34e0:	62 9f       	mul	r22, r18
    34e2:	d0 01       	movw	r26, r0
    34e4:	73 9f       	mul	r23, r19
    34e6:	f0 01       	movw	r30, r0
    34e8:	82 9f       	mul	r24, r18
    34ea:	e0 0d       	add	r30, r0
    34ec:	f1 1d       	adc	r31, r1
    34ee:	64 9f       	mul	r22, r20
    34f0:	e0 0d       	add	r30, r0
    34f2:	f1 1d       	adc	r31, r1
    34f4:	92 9f       	mul	r25, r18
    34f6:	f0 0d       	add	r31, r0
    34f8:	83 9f       	mul	r24, r19
    34fa:	f0 0d       	add	r31, r0
    34fc:	74 9f       	mul	r23, r20
    34fe:	f0 0d       	add	r31, r0
    3500:	65 9f       	mul	r22, r21
    3502:	f0 0d       	add	r31, r0
    3504:	99 27       	eor	r25, r25
    3506:	72 9f       	mul	r23, r18
    3508:	b0 0d       	add	r27, r0
    350a:	e1 1d       	adc	r30, r1
    350c:	f9 1f       	adc	r31, r25
    350e:	63 9f       	mul	r22, r19
    3510:	b0 0d       	add	r27, r0
    3512:	e1 1d       	adc	r30, r1
    3514:	f9 1f       	adc	r31, r25
    3516:	bd 01       	movw	r22, r26
    3518:	cf 01       	movw	r24, r30
    351a:	11 24       	eor	r1, r1
    351c:	08 95       	ret

0000351e <__udivmodqi4>:
    351e:	99 1b       	sub	r25, r25
    3520:	79 e0       	ldi	r23, 0x09	; 9
    3522:	04 c0       	rjmp	.+8      	; 0x352c <__udivmodqi4_ep>

00003524 <__udivmodqi4_loop>:
    3524:	99 1f       	adc	r25, r25
    3526:	96 17       	cp	r25, r22
    3528:	08 f0       	brcs	.+2      	; 0x352c <__udivmodqi4_ep>
    352a:	96 1b       	sub	r25, r22

0000352c <__udivmodqi4_ep>:
    352c:	88 1f       	adc	r24, r24
    352e:	7a 95       	dec	r23
    3530:	c9 f7       	brne	.-14     	; 0x3524 <__udivmodqi4_loop>
    3532:	80 95       	com	r24
    3534:	08 95       	ret

00003536 <__udivmodhi4>:
    3536:	aa 1b       	sub	r26, r26
    3538:	bb 1b       	sub	r27, r27
    353a:	51 e1       	ldi	r21, 0x11	; 17
    353c:	07 c0       	rjmp	.+14     	; 0x354c <__udivmodhi4_ep>

0000353e <__udivmodhi4_loop>:
    353e:	aa 1f       	adc	r26, r26
    3540:	bb 1f       	adc	r27, r27
    3542:	a6 17       	cp	r26, r22
    3544:	b7 07       	cpc	r27, r23
    3546:	10 f0       	brcs	.+4      	; 0x354c <__udivmodhi4_ep>
    3548:	a6 1b       	sub	r26, r22
    354a:	b7 0b       	sbc	r27, r23

0000354c <__udivmodhi4_ep>:
    354c:	88 1f       	adc	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	5a 95       	dec	r21
    3552:	a9 f7       	brne	.-22     	; 0x353e <__udivmodhi4_loop>
    3554:	80 95       	com	r24
    3556:	90 95       	com	r25
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	08 95       	ret

0000355e <__divmodhi4>:
    355e:	97 fb       	bst	r25, 7
    3560:	09 2e       	mov	r0, r25
    3562:	07 26       	eor	r0, r23
    3564:	0a d0       	rcall	.+20     	; 0x357a <__divmodhi4_neg1>
    3566:	77 fd       	sbrc	r23, 7
    3568:	04 d0       	rcall	.+8      	; 0x3572 <__divmodhi4_neg2>
    356a:	e5 df       	rcall	.-54     	; 0x3536 <__udivmodhi4>
    356c:	06 d0       	rcall	.+12     	; 0x357a <__divmodhi4_neg1>
    356e:	00 20       	and	r0, r0
    3570:	1a f4       	brpl	.+6      	; 0x3578 <__divmodhi4_exit>

00003572 <__divmodhi4_neg2>:
    3572:	70 95       	com	r23
    3574:	61 95       	neg	r22
    3576:	7f 4f       	sbci	r23, 0xFF	; 255

00003578 <__divmodhi4_exit>:
    3578:	08 95       	ret

0000357a <__divmodhi4_neg1>:
    357a:	f6 f7       	brtc	.-4      	; 0x3578 <__divmodhi4_exit>
    357c:	90 95       	com	r25
    357e:	81 95       	neg	r24
    3580:	9f 4f       	sbci	r25, 0xFF	; 255
    3582:	08 95       	ret

00003584 <__udivmodsi4>:
    3584:	a1 e2       	ldi	r26, 0x21	; 33
    3586:	1a 2e       	mov	r1, r26
    3588:	aa 1b       	sub	r26, r26
    358a:	bb 1b       	sub	r27, r27
    358c:	fd 01       	movw	r30, r26
    358e:	0d c0       	rjmp	.+26     	; 0x35aa <__udivmodsi4_ep>

00003590 <__udivmodsi4_loop>:
    3590:	aa 1f       	adc	r26, r26
    3592:	bb 1f       	adc	r27, r27
    3594:	ee 1f       	adc	r30, r30
    3596:	ff 1f       	adc	r31, r31
    3598:	a2 17       	cp	r26, r18
    359a:	b3 07       	cpc	r27, r19
    359c:	e4 07       	cpc	r30, r20
    359e:	f5 07       	cpc	r31, r21
    35a0:	20 f0       	brcs	.+8      	; 0x35aa <__udivmodsi4_ep>
    35a2:	a2 1b       	sub	r26, r18
    35a4:	b3 0b       	sbc	r27, r19
    35a6:	e4 0b       	sbc	r30, r20
    35a8:	f5 0b       	sbc	r31, r21

000035aa <__udivmodsi4_ep>:
    35aa:	66 1f       	adc	r22, r22
    35ac:	77 1f       	adc	r23, r23
    35ae:	88 1f       	adc	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	1a 94       	dec	r1
    35b4:	69 f7       	brne	.-38     	; 0x3590 <__udivmodsi4_loop>
    35b6:	60 95       	com	r22
    35b8:	70 95       	com	r23
    35ba:	80 95       	com	r24
    35bc:	90 95       	com	r25
    35be:	9b 01       	movw	r18, r22
    35c0:	ac 01       	movw	r20, r24
    35c2:	bd 01       	movw	r22, r26
    35c4:	cf 01       	movw	r24, r30
    35c6:	08 95       	ret

000035c8 <__divmodsi4>:
    35c8:	97 fb       	bst	r25, 7
    35ca:	09 2e       	mov	r0, r25
    35cc:	05 26       	eor	r0, r21
    35ce:	0e d0       	rcall	.+28     	; 0x35ec <__divmodsi4_neg1>
    35d0:	57 fd       	sbrc	r21, 7
    35d2:	04 d0       	rcall	.+8      	; 0x35dc <__divmodsi4_neg2>
    35d4:	d7 df       	rcall	.-82     	; 0x3584 <__udivmodsi4>
    35d6:	0a d0       	rcall	.+20     	; 0x35ec <__divmodsi4_neg1>
    35d8:	00 1c       	adc	r0, r0
    35da:	38 f4       	brcc	.+14     	; 0x35ea <__divmodsi4_exit>

000035dc <__divmodsi4_neg2>:
    35dc:	50 95       	com	r21
    35de:	40 95       	com	r20
    35e0:	30 95       	com	r19
    35e2:	21 95       	neg	r18
    35e4:	3f 4f       	sbci	r19, 0xFF	; 255
    35e6:	4f 4f       	sbci	r20, 0xFF	; 255
    35e8:	5f 4f       	sbci	r21, 0xFF	; 255

000035ea <__divmodsi4_exit>:
    35ea:	08 95       	ret

000035ec <__divmodsi4_neg1>:
    35ec:	f6 f7       	brtc	.-4      	; 0x35ea <__divmodsi4_exit>
    35ee:	90 95       	com	r25
    35f0:	80 95       	com	r24
    35f2:	70 95       	com	r23
    35f4:	61 95       	neg	r22
    35f6:	7f 4f       	sbci	r23, 0xFF	; 255
    35f8:	8f 4f       	sbci	r24, 0xFF	; 255
    35fa:	9f 4f       	sbci	r25, 0xFF	; 255
    35fc:	08 95       	ret

000035fe <__prologue_saves__>:
    35fe:	2f 92       	push	r2
    3600:	3f 92       	push	r3
    3602:	4f 92       	push	r4
    3604:	5f 92       	push	r5
    3606:	6f 92       	push	r6
    3608:	7f 92       	push	r7
    360a:	8f 92       	push	r8
    360c:	9f 92       	push	r9
    360e:	af 92       	push	r10
    3610:	bf 92       	push	r11
    3612:	cf 92       	push	r12
    3614:	df 92       	push	r13
    3616:	ef 92       	push	r14
    3618:	ff 92       	push	r15
    361a:	0f 93       	push	r16
    361c:	1f 93       	push	r17
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	ca 1b       	sub	r28, r26
    3628:	db 0b       	sbc	r29, r27
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0f be       	out	0x3f, r0	; 63
    3632:	cd bf       	out	0x3d, r28	; 61
    3634:	09 94       	ijmp

00003636 <__epilogue_restores__>:
    3636:	2a 88       	ldd	r2, Y+18	; 0x12
    3638:	39 88       	ldd	r3, Y+17	; 0x11
    363a:	48 88       	ldd	r4, Y+16	; 0x10
    363c:	5f 84       	ldd	r5, Y+15	; 0x0f
    363e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3640:	7d 84       	ldd	r7, Y+13	; 0x0d
    3642:	8c 84       	ldd	r8, Y+12	; 0x0c
    3644:	9b 84       	ldd	r9, Y+11	; 0x0b
    3646:	aa 84       	ldd	r10, Y+10	; 0x0a
    3648:	b9 84       	ldd	r11, Y+9	; 0x09
    364a:	c8 84       	ldd	r12, Y+8	; 0x08
    364c:	df 80       	ldd	r13, Y+7	; 0x07
    364e:	ee 80       	ldd	r14, Y+6	; 0x06
    3650:	fd 80       	ldd	r15, Y+5	; 0x05
    3652:	0c 81       	ldd	r16, Y+4	; 0x04
    3654:	1b 81       	ldd	r17, Y+3	; 0x03
    3656:	aa 81       	ldd	r26, Y+2	; 0x02
    3658:	b9 81       	ldd	r27, Y+1	; 0x01
    365a:	ce 0f       	add	r28, r30
    365c:	d1 1d       	adc	r29, r1
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	cd bf       	out	0x3d, r28	; 61
    3668:	ed 01       	movw	r28, r26
    366a:	08 95       	ret

0000366c <_exit>:
    366c:	f8 94       	cli

0000366e <__stop_program>:
    366e:	ff cf       	rjmp	.-2      	; 0x366e <__stop_program>
